<?xml version="1.0"?>
<doc>
  <assembly>
    <name>XcoAppSpaces</name>
  </assembly>
  <members>
    <member name="T:XcoAppSpaces.Core.Extensions.PortExtensions">
      <summary>
            Extensions for the Port{T} class.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.Extensions.PortExtensions.TestSync``1(Microsoft.Ccr.Core.Port{``0})">
      <summary>
            Get a message from the port. If the port is currently empty wait for the next message.
            </summary>
      <typeparam name="TPortElement">The message type.</typeparam>
      <param name="port">The port.</param>
      <returns>The next message in the port.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.Extensions.PortExtensions.TestSync``1(Microsoft.Ccr.Core.Port{``0},System.Int32)">
      <summary>
            Get a message from the port. If the port is currently empty wait for the next message 
            until the given timeout. An exception is thrown if no message arrives in time.
            </summary>
      <typeparam name="TPortElement">The message type.</typeparam>
      <param name="port">The port.</param>
      <param name="timeout">The maximum time to wait.</param>
      <returns>The next message in the port.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.Extensions.PortExtensions.PostWithCausality``1(Microsoft.Ccr.Core.Port{``0},``0,Microsoft.Ccr.Core.Port{System.Exception})">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="TPortElement">The message type.</typeparam>
      <param name="port">The port.</param>
      <param name="message">The message to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.Extensions.PortExtensions.PostWithCausality``1(Microsoft.Ccr.Core.Port{``0},``0,Microsoft.Ccr.Core.Handler{System.Exception})">
      <summary>
            Posts a message to the port while using the given exceptionHandler register to a causality 
            for returning exceptions.
            </summary>
      <typeparam name="TPortElement">The message type.</typeparam>
      <param name="port">The port.</param>
      <param name="message">The message to be posted.</param>
      <param name="exceptionHandler">The handler where exceptions should be returned.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.Extensions.PortExtensions.PostWithCausality``1(Microsoft.Ccr.Core.Port{``0},``0,Microsoft.Ccr.Core.Handler{System.Exception},Microsoft.Ccr.Core.IPort)">
      <summary>
            Posts a message to the port while using the given exceptionHandler register to a causality 
            for returning exceptions.
            </summary>
      <typeparam name="TPortElement">The message type.</typeparam>
      <param name="port">The port.</param>
      <param name="message">The message to be posted.</param>
      <param name="exceptionHandler">The handler where exceptions should be returned.</param>
      <param name="coordinationPort">The port which should registered in the causality as coordination port.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.Extensions.PortExtensions.PostWithCausality``1(Microsoft.Ccr.Core.Port{``0},``0,Microsoft.Ccr.Core.Port{System.Exception},Microsoft.Ccr.Core.IPort)">
      <summary>
            Posts a message to the port while using the given exceptionPort as causality.
            </summary>
      <typeparam name="TPortElement">The message type.</typeparam>
      <param name="port">The port.</param>
      <param name="message">The message to be posted.</param>
      <param name="exceptionPort">The port where exceptions should be returned.</param>
      <param name="coordinationPort">The port which should registered in the causality as coordination port.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.Extensions.PortExtensions.GetPortInfo(Microsoft.Ccr.Core.IPort)">
      <summary>
            Get information about the port concerning remote communication.
            </summary>
      <param name="port">The port.</param>
      <returns>Remote communication information about the port.</returns>
    </member>
    <member name="T:XcoAppSpaces.Core.SyncContext">
      <summary>
             Using the causalities in the SynchronizationContext
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Core.SyncContext.NoSyncContext">
      <summary>
            No synchronization context used
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Core.SyncContext.UseCurrentSyncContext">
      <summary>
            SynchronizationContext.Current will be used for task execution
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.Extensions.XcoAppSpaceExtensions">
      <summary>
            XcoAppSpace extension methods for simplifying usage of the application space.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.Extensions.XcoAppSpaceExtensions.Receive``1(XcoAppSpaces.Core.XcoAppSpace,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Handler{``0})">
      <summary>
            Receive messages from the given port. Whenever an element is posted to the port, the given handler is called.
            </summary>
      <typeparam name="TMessage">The mesage type of the port.</typeparam>
      <param name="space">The XcoAppSpace.</param>
      <param name="port">The port from which the messages should be received.</param>
      <param name="handler">The method to be called when a message is received from the port.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.Extensions.XcoAppSpaceExtensions.Receive``1(XcoAppSpaces.Core.XcoAppSpace,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Handler{``0},XcoAppSpaces.Core.SyncContext)">
      <summary>
            Receive messages from the given port. Whenever an element is posted to the port, the given handler is called.
            </summary>
      <typeparam name="TMessage">The mesage type of the port.</typeparam>
      <param name="space">The XcoAppSpace.</param>
      <param name="port">The port from which the messages should be received.</param>
      <param name="handler">The method to be called when a message is received from the port.</param>
      <param name="syncContext">Specifies the synchronization context that is used for processing the messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.Extensions.XcoAppSpaceExtensions.ReceiveSequentially``1(XcoAppSpaces.Core.XcoAppSpace,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Handler{``0})">
      <summary>
            Receive messages from the given port. Whenever an element is posted to the port, the given handler is called.
            Messages are received sequentially, meaning that the next message is received only after processing of the
            previous one has been finished.
            </summary>
      <typeparam name="TMessage">The mesage type of the port.</typeparam>
      <param name="space">The XcoAppSpace.</param>
      <param name="port">The port from which the messages should be received.</param>
      <param name="handler">The method to be called when a message is received from the port.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.Extensions.XcoAppSpaceExtensions.ReceiveSequentially``1(XcoAppSpaces.Core.XcoAppSpace,Microsoft.Ccr.Core.Port{``0},Microsoft.Ccr.Core.Handler{``0},XcoAppSpaces.Core.SyncContext)">
      <summary>
            Receive messages from the given port. Whenever an element is posted to the port, the given handler is called.
            Messages are received sequentially, meaning that the next message is received only after processing of the
            previous one has been finished.
            </summary>
      <typeparam name="TMessage">The mesage type of the port.</typeparam>
      <param name="space">The XcoAppSpace.</param>
      <param name="port">The port from which the messages should be received.</param>
      <param name="handler">The method to be called when a message is received from the port.</param>
      <param name="syncContext">Specifies the synchronization context that is used for processing the messages.</param>
    </member>
    <member name="T:XcoAppSpaces.Core.CausalityHelpers">
      <summary>
            Helper methods for getting and setting the current causalities.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.LocalWorkerRegistry">
      <summary>
            Wrapper class for access to the local workers by the Core.Communication components.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.IXcoFluentConfiguration">
      <summary>
            Fluent interface for creating an XcoAppSpace.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoFluentConfiguration.Create">
      <summary>
            Creates an XcoAppSpace with the given configuration.
            </summary>
      <returns>A new XcoAppSpace instance.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoFluentConfiguration.UsingCcrDispatcher(Microsoft.Ccr.Core.Dispatcher)">
      <summary>
            Defines the CCR dispatcher that the XcoAppSpace should use (if not defined, the XcoAppSpace uses its own CCR dispatcher).
            </summary>
      <param name="ccrDispatcher">The CCR Dispatcher that the XcoAppSpace should use.</param>
      <returns>The given XcoAppSpaceConfiguration instance.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoFluentConfiguration.UsingService``1(``0)">
      <summary>
            Defines a service that the XcoAppSpace should use (if not defined, the default for this type of service is used). An
            exception is thrown if the type of service is unknown.
            </summary>
      <param name="service">The service that the XcoAppSpace should use.</param>
      <returns>An XcoFluentServiceConfiguration instance to configure the service.</returns>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoAppSpaceConfig">
      <summary>
            Fluent interface for creating an XcoAppSpace.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpaceConfig.#ctor(System.String)">
      <summary>
            Creates a new XcoAppSpaceConfig using a given config string.
            </summary>
      <param name="configString">The config string that should be used.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpaceConfig.#ctor">
      <summary>
            Creates a new XcoAppSpaceConfig.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpaceConfig.Create">
      <summary>
            Creates an XcoAppSpace with the given configuration.
            </summary>
      <returns>A new XcoAppSpace instance.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpaceConfig.UsingCcrDispatcher(Microsoft.Ccr.Core.Dispatcher)">
      <summary>
            Defines the CCR dispatcher that the XcoAppSpace should use (if not defined, the XcoAppSpace uses its own CCR dispatcher).
            </summary>
      <param name="ccrDispatcher">The CCR Dispatcher that the XcoAppSpace should use.</param>
      <returns>The given XcoAppSpaceConfiguration instance.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpaceConfig.UsingService``1(``0)">
      <summary>
            Defines a service that the XcoAppSpace should use (if not defined, the default for this type of service is used). An
            exception is thrown if the type of service is unknown.
            </summary>
      <param name="service">The service that the XcoAppSpace should use.</param>
      <returns>An XcoFluentServiceConfiguration instance to configure the service.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpaceConfig.op_Implicit(XcoAppSpaces.Core.XcoAppSpaceConfig)~XcoAppSpaces.Core.XcoAppSpace">
      <summary>
            Creates an XcoAppSpace instance from the given configuration object.
            </summary>
      <param name="config">The configuration object.</param>
      <returns>The created XcoAppSpace instance.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpaceConfig.InitServiceRegistry(XcoAppSpaces.Contracts.Service.IXcoServiceRegistry)">
      <summary>
            Initializes a service registry instance by adding all services that are configured in 
            this XcoAppSpaceConfig instance.
            </summary>
      <param name="reg">The service registry that should be initialized.</param>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoServiceConfig`1">
      <summary>
            Fluent interface for creating an XcoAppSpace and configuring a communication service.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoServiceConfig`1.WithName(System.String)">
      <summary>
            Defines the name of the communication service. (The name must be unique among all communication service
            instances.)
            </summary>
      <param name="name">The name of the communication service.</param>
      <returns>The given XcoCommServiceConfiguration instance.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoServiceConfig`1.AsDefault">
      <summary>
            Defines that the communication service to be the default for the space.
            </summary>
      <returns>The given XcoCommServiceConfiguration instance.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoServiceConfig`1.Create">
      <summary>
            Creates a new XcoAppSpace instance with the given configuration.
            </summary>
      <returns>A new XcoAppSpace instance.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoServiceConfig`1.UsingCcrDispatcher(Microsoft.Ccr.Core.Dispatcher)">
      <summary>
            Defines the ccr dispatcher instance that should be used by the space.
            </summary>
      <param name="ccrDispatcher">The ccr dispatcher instance.</param>
      <returns>The given configuration object for further configuration of the space.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoServiceConfig`1.UsingService``1(``0)">
      <summary>
            Defines a certain service instance that should be used by the space.
            </summary>
      <typeparam name="TS">The type of the service.</typeparam>
      <param name="service">The service instance.</param>
      <returns>A configuration object that can be used to configure this service instance.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoServiceConfig`1.op_Implicit(XcoAppSpaces.Core.XcoServiceConfig{`0})~XcoAppSpaces.Core.XcoAppSpace">
      <summary>
            Operator that creates an XcoAppSpace instance from the given configuration object.
            </summary>
      <param name="config">The configuration object.</param>
      <returns>The created XcoAppSpace instance.</returns>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoServiceConfig`1.Service">
      <summary>
            The service that is getting configured.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoServiceConfig`1.Config">
      <summary>
            The configuration itself.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.Unsubscribe">
      <summary>
            Non-generic base class for unsubscribing from events that are published by workers
            using the XcoPublisher class.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.Unsubscribe`1">
      <summary>
            Class for unsubscribing from events that are published by workers
            using the XcoPublisher class.
            </summary>
      <typeparam name="T">The type of event.</typeparam>
    </member>
    <member name="M:XcoAppSpaces.Core.Unsubscribe`1.#ctor(Microsoft.Ccr.Core.Port{`0})">
      <summary>
            Creates a new Unsubscribe message.
            </summary>
      <param name="eventPort">The port that should be unsubscribed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.Unsubscribe`1.#ctor(Microsoft.Ccr.Core.IPort)">
      <summary>
            Creates a new Unsubscribe message.
            </summary>
      <param name="eventPort">The port that should be unsubscribed.</param>
    </member>
    <member name="P:XcoAppSpaces.Core.Unsubscribe`1.EventPort">
      <summary>
            The port that should be unsubscribed.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.Subscribe">
      <summary>
            Non-generic base class for subscribing to events that are published by workers
            using the XcoPublisher class.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.Subscribe`1">
      <summary>
            Class for Subscribing to events that are published by workers
            using the XcoPublisher class.
            </summary>
      <typeparam name="T">The type of event.</typeparam>
    </member>
    <member name="M:XcoAppSpaces.Core.Subscribe`1.#ctor(Microsoft.Ccr.Core.Port{`0})">
      <summary>
            Creates a new Subscribe message.
            </summary>
      <param name="eventPort">The port that should be subscribed to receive events.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.Subscribe`1.#ctor(Microsoft.Ccr.Core.IPort)">
      <summary>
            Creates a new Subscribe message.
            </summary>
      <param name="eventPort">The port that should be subscribed to receive events.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.Subscribe`1.#ctor(Microsoft.Ccr.Core.Port{`0},System.Linq.Expressions.Expression{System.Predicate{`0}})">
      <summary>
            Creates a new Subscribe message.
            </summary>
      <param name="eventPort">The port that should be subscribed to receive events.</param>
      <param name="filterExpr">Predicate that can be used for filtering the event messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.Subscribe`1.#ctor(Microsoft.Ccr.Core.IPort,System.Linq.Expressions.Expression{System.Predicate{`0}})">
      <summary>
            Creates a new Subscribe message.
            </summary>
      <param name="eventPort">The port that should be subscribed to receive events.</param>
      <param name="filterExpr">Predicate that can be used for filtering the event messages.</param>
    </member>
    <member name="P:XcoAppSpaces.Core.Subscribe`1.EventPort">
      <summary>
            The port that should be subscribed to to receive events.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoSpaceInfo">
      <summary>
            Class that presents meta information about the space.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoSpaceInfo.Workers">
      <summary>
            Information about the workers of this space instance.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoSpaceInfo.TransportServices">
      <summary>
            Information about the communication services of this space instance.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoSpaceInfo.SecurityService">
      <summary>
            The security service that is used by this space instance.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.IXcoAppSpace">
      <summary>
            Interface definition for the XcoAppSpace class, the main class of XcoAppSpaces.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.Resolve``1">
      <summary>
            Resolves an instance of the requested type with the given name from the local appspace.
            </summary>
      <typeparam name="TContract">The type that is requested.</typeparam>
      <returns>The resolved object.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.Resolve``1(System.String)">
      <summary>
            Resolves worker of the requested type with the given name from the local appspace.
            </summary>
      <typeparam name="TContract">The type that is requested.</typeparam>
      <param name="name">The name of the object to retreive.</param>
      <returns>The resolved object.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.RunWorker``2">
      <summary>
            Runs a worker within the appspace. The worker is published so other appspace instances can connect to it.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.RunWorker``2(Microsoft.Ccr.Core.DispatcherQueue)">
      <summary>
            Runs a worker within the appspace. The worker is published so other appspace instances can connect to it.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <param name="queue">The CCR dispatcher queue that should be used, or null if the appspace's default dispatcher queue should be used.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.RunWorker``2(System.String)">
      <summary>
            Runs a worker within the appspace. The worker is published so other appspace instances can connect to it.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <param name="name">The name under which the worker should be registered.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.RunWorker``2(System.String,Microsoft.Ccr.Core.DispatcherQueue)">
      <summary>
            Runs a worker within the appspace. The worker is published so other appspace instances can connect to it.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <param name="name">The name under which the worker should be registered.</param>
      <param name="queue">The CCR dispatcher queue that should be used, or null if the appspace's default dispatcher queue should be used.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.RunWorker``2(XcoAppSpaces.Contracts.Worker.PublishMode)">
      <summary>
            Runs a worker within the appspace.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <param name="publish">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.RunWorker``2(XcoAppSpaces.Contracts.Worker.PublishMode,Microsoft.Ccr.Core.DispatcherQueue)">
      <summary>
            Runs a worker within the appspace.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <param name="publish">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <param name="queue">The CCR dispatcher queue that should be used, or null if the appspace's default dispatcher queue should be used.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.RunWorker``2(XcoAppSpaces.Contracts.Worker.PublishMode,System.String)">
      <summary>
            Runs a worker within the appspace.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <param name="publish">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <param name="name">The name under which the worker should be registered.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.RunWorker``2(XcoAppSpaces.Contracts.Worker.PublishMode,System.String,Microsoft.Ccr.Core.DispatcherQueue)">
      <summary>
            Runs a worker within the appspace.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <param name="publish">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <param name="name">The name under which the worker should be registered.</param>
      <param name="queue">The CCR dispatcher queue that should be used, or null if the appspace's default dispatcher queue should be used.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.RunWorker``1(``0)">
      <summary>
            Runs a worker within the appspace.  The worker is published so other appspace instances can connect to it.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.RunWorker``1(``0,System.String)">
      <summary>
            Runs a worker within the appspace.  The worker is published so other appspace instances can connect to it.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <param name="worker">The worker instance to run.</param>
      <param name="name">The name under which the worker should be registered.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.RunWorker``1(``0,System.String,Microsoft.Ccr.Core.DispatcherQueue)">
      <summary>
            Runs a worker within the appspace.  The worker is published so other appspace instances can connect to it.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <param name="worker">The worker instance to run.</param>
      <param name="name">The name under which the worker should be registered.</param>
      <param name="queue">The CCR dispatcher queue that should be used, or null if the appspace's default dispatcher queue should be used.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.RunWorker``1(``0,XcoAppSpaces.Contracts.Worker.PublishMode)">
      <summary>
            Runs a worker within the appspace. 
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <param name="worker">The worker instance to run.</param>
      <param name="publish">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.RunWorker``1(``0,XcoAppSpaces.Contracts.Worker.PublishMode,System.String)">
      <summary>
            Runs a worker within the appspace.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <param name="worker">The worker instance to run.</param>
      <param name="publish">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <param name="name">The name under which the worker should be registered.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.RunWorker``1(``0,XcoAppSpaces.Contracts.Worker.PublishMode,System.String,Microsoft.Ccr.Core.DispatcherQueue)">
      <summary>
            Runs a worker within the appspace.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <param name="worker">The worker instance to run.</param>
      <param name="publish">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <param name="name">The name under which the worker should be registered.</param>
      <param name="queue">The CCR dispatcher queue that should be used, or null if the appspace's default dispatcher queue should be used.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.StopWorker(Microsoft.Ccr.Core.IPort)">
      <summary>
            Disposes the given worker instance and removes it from the appspace.
            </summary>
      <param name="worker">The worker to be removed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.StopWorker``1">
      <summary>
            Disposes a worker instance and removes it from the appspace.
            </summary>
      <typeparam name="TMessageContract">The type of the worker.</typeparam>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.StopWorker``1(System.String)">
      <summary>
            Disposes a worker instance and removes it from the appspace.
            </summary>
      <typeparam name="TMessageContract">The type of the worker.</typeparam>
      <param name="name">The name of the worker.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.ConnectWorker``1(System.String)">
      <summary>
            Establishes a connection to a worker that is running at a remote space, and registers
            the worker at the local space.  After ConnectWorker is called, the worker to which the
            connection has been established is also available through the appspace's Resolve method.
            This method allows using addresses that are not displayable with a "hostname:port" pattern.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="workerAddress">The address of the worker in form "address/workername"</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.ConnectWorker``1(System.String,System.String)">
      <summary>
            Establishes a connection to a worker that is running at a remote space, and registers
            the worker at the local space. After ConnectWorker is called, the worker to which the
            connection has been established is also available through the appspace's Resolve method.
            This method allows using addresses that are not displayable with a "hostname:port" pattern.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="workerAddress">The address of the worker in form "address/workername"</param>
      <param name="localName">The name under which the worker should be registered locally.</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.ConnectWorker``1(System.String,System.String,System.String)">
      <summary>
            Establishes a connection to a worker that is running at a remote space, and registers
            the worker at the local space. After ConnectWorker is called, the worker to which the
            connection has been established is also available through the appspace's Resolve method.
            This method allows using addresses that are not displayable with a "hostname:port" pattern.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="commServiceName">The name of the communication service that should be used for communication with the worker.</param>
      <param name="workerAddress">The address of the worker in form "address/workername"</param>
      <param name="localName">The name under which the worker should be registered locally.</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.ConnectWorker``1(XcoAppSpaces.Contracts.Worker.PublishMode,System.String)">
      <summary>
            Establishes a connection to a worker that is running at a remote space, and registers
            the worker at the local space.  After ConnectWorker is called, the worker to which the
            connection has been established is also available through the appspace's Resolve method.
            This method allows using addresses that are not displayable with a "hostname:port" pattern.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="publish">Defines if the created worker proxy should be published so other appspace instances can connnect to it, and by that use the appspace instance to connect to the original worker.</param>
      <param name="workerAddress">The address of the worker in form "address/workername"</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.ConnectWorker``1(XcoAppSpaces.Contracts.Worker.PublishMode,System.String,System.String)">
      <summary>
            Establishes a connection to a worker that is running at a remote space, and registers
            the worker at the local space. After ConnectWorker is called, the worker to which the
            connection has been established is also available through the appspace's Resolve method.
            This method allows using addresses that are not displayable with a "hostname:port" pattern.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="publish">Defines if the created worker proxy should be published so other appspace instances can connnect to it, and by that use the appspace instance to connect to the original worker.</param>
      <param name="workerAddress">The address of the worker in form "address/workername"</param>
      <param name="localName">The name under which the worker should be registered locally.</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.IXcoAppSpace.ConnectWorker``1(XcoAppSpaces.Contracts.Worker.PublishMode,System.String,System.String,System.String)">
      <summary>
            Establishes a connection to a worker that is running at a remote space, and registers
            the worker at the local space. After ConnectWorker is called, the worker to which the
            connection has been established is also available through the appspace's Resolve method.
            This method allows using addresses that are not displayable with a "hostname:port" pattern.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="publish">Defines if the created worker proxy should be published so other appspace instances can connnect to it, and by that use the appspace instance to connect to the original worker.</param>
      <param name="commServiceName">The name of the communication service that should be used for communication with the worker.</param>
      <param name="workerAddress">The address of the worker in form "address/workername"</param>
      <param name="localName">The name under which the worker should be registered locally.</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="P:XcoAppSpaces.Core.IXcoAppSpace.Info">
      <summary>
            Provides meta information about the XcoAppSpace instance, e.g. information about 
            running workers and communication services.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.IXcoAppSpace.Credentials">
      <summary>
            The credentials that are used by the space to connect to remote workers.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.IXcoAppSpace.DefaultDispatcher">
      <summary>
            The CCR dispatcher that is used by the appspace.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.IXcoAppSpace.DefaultDispatcherQueue">
      <summary>
            The CCR dispatcher queue taht is used by the appspace.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.IXcoAppSpace.Address">
      <summary>
            The address of the space (that can be used by other spaces to connect to this space)
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.IXcoAppSpace.Errors">
      <summary>
            Port where errors are posted that occur during commmunication with Fother space instances
            and that have not been caught by causalities (e.g. errors during message deserialization 
            or security errors).
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoAppSpace">
      <summary>
            The main class of XcoAppSpaces. XcoAppSpace represents the application space
            and allows running workers, as well as resolving worker that have already been
            started and connecting to workers running at a remote space. It also provides
            basic dependency injection container functionality.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.#ctor">
      <summary>
            Creates a new XcoAppSpace without remote communication functionality.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.#ctor(System.String)">
      <summary>
            Creates a new XcoAppSpace by using the given config string.
            </summary>
      <param name="configString">The config string to configure the appspace instance.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.#ctor(XcoAppSpaces.Core.Configuration.IXcoConfiguration)">
      <summary>
            Creates a new XcoAppSpace by using the given configuration.
            </summary>
      <param name="config">
      </param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.Resolve``1">
      <summary>
            Resolves an instance of the requested type with the given name from the local appspace.
            </summary>
      <typeparam name="TContract">The type that is requested.</typeparam>
      <returns>The resolved object.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.Resolve``1(System.String)">
      <summary>
            Resolves worker of the requested type with the given name from the local appspace.
            </summary>
      <typeparam name="TContract">The type that is requested.</typeparam>
      <param name="name">The name of the object to retreive.</param>
      <returns>The resolved object.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.RunWorker``2">
      <summary>
            Runs a worker within the appspace. The worker is published so other appspace instances can connect to it.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.RunWorker``2(Microsoft.Ccr.Core.DispatcherQueue)">
      <summary>
            Runs a worker within the appspace. The worker is published so other appspace instances can connect to it.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <param name="queue">The CCR dispatcher queue that should be used, or null if the appspace's default dispatcher queue should be used.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.RunWorker``2(System.String)">
      <summary>
            Runs a worker within the appspace. The worker is published so other appspace instances can connect to it.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <param name="name">The name under which the worker should be registered.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.RunWorker``2(System.String,Microsoft.Ccr.Core.DispatcherQueue)">
      <summary>
            Runs a worker within the appspace. The worker is published so other appspace instances can connect to it.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <param name="name">The name under which the worker should be registered.</param>
      <param name="queue">The CCR dispatcher queue that should be used, or null if the appspace's default dispatcher queue should be used.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.RunWorker``2(XcoAppSpaces.Contracts.Worker.PublishMode)">
      <summary>
            Runs a worker within the appspace.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <param name="publish">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.RunWorker``2(XcoAppSpaces.Contracts.Worker.PublishMode,Microsoft.Ccr.Core.DispatcherQueue)">
      <summary>
            Runs a worker within the appspace.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <param name="publish">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <param name="queue">The CCR dispatcher queue that should be used, or null if the appspace's default dispatcher queue should be used.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.RunWorker``2(XcoAppSpaces.Contracts.Worker.PublishMode,System.String)">
      <summary>
            Runs a worker within the appspace.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <param name="publish">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <param name="name">The name under which the worker should be registered.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.RunWorker``2(XcoAppSpaces.Contracts.Worker.PublishMode,System.String,Microsoft.Ccr.Core.DispatcherQueue)">
      <summary>
            Runs a worker within the appspace.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker (which must inherit from the contract type).</typeparam>
      <param name="publishMode">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <param name="name">The name under which the worker should be registered.</param>
      <param name="queue">The CCR dispatcher queue that should be used, or null if the appspace's default dispatcher queue should be used.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.RunWorker``1(``0)">
      <summary>
            Runs a worker within the appspace.  The worker is published so other appspace instances can connect to it.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.RunWorker``1(``0,System.String)">
      <summary>
            Runs a worker within the appspace.  The worker is published so other appspace instances can connect to it.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <param name="worker">The worker instance to run.</param>
      <param name="name">The name under which the worker should be registered.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.RunWorker``1(``0,System.String,Microsoft.Ccr.Core.DispatcherQueue)">
      <summary>
            Runs a worker within the appspace.  The worker is published so other appspace instances can connect to it.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <param name="worker">The worker instance to run.</param>
      <param name="name">The name under which the worker should be registered.</param>
      <param name="queue">The CCR dispatcher queue that should be used, or null if the appspace's default dispatcher queue should be used.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.RunWorker``1(``0,XcoAppSpaces.Contracts.Worker.PublishMode)">
      <summary>
            Runs a worker within the appspace. 
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <param name="worker">The worker instance to run.</param>
      <param name="publish">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.RunWorker``1(``0,XcoAppSpaces.Contracts.Worker.PublishMode,System.String)">
      <summary>
            Runs a worker within the appspace.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <param name="worker">The worker instance to run.</param>
      <param name="publish">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <param name="name">The name under which the worker should be registered.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.RunWorker``1(``0,XcoAppSpaces.Contracts.Worker.PublishMode,System.String,Microsoft.Ccr.Core.DispatcherQueue)">
      <summary>
            Runs a worker within the appspace.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker, which must be an IPort (meaning it must be a CCR Port or PortSet).</typeparam>
      <param name="worker">The worker instance to run.</param>
      <param name="publishMode">Defines if the worker should be published so other appspace instances can connnect to it.</param>
      <param name="name">The name under which the worker should be registered.</param>
      <param name="queue">The CCR dispatcher queue that should be used, or null if the appspace's default dispatcher queue should be used.</param>
      <returns>The worker instance that has been created.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.StopWorker(Microsoft.Ccr.Core.IPort)">
      <summary>
            Disposes the given worker instance and removes it from the appspace.
            </summary>
      <param name="worker">The worker to be removed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.StopWorker``1">
      <summary>
            Disposes a worker instance and removes it from the appspace.
            </summary>
      <typeparam name="TMessageContract">The type of the worker.</typeparam>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.StopWorker``1(System.String)">
      <summary>
            Disposes a worker instance and removes it from the appspace.
            </summary>
      <typeparam name="TMessageContract">The type of the worker.</typeparam>
      <param name="name">The name of the worker.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.ConnectWorker``1(System.String)">
      <summary>
            Establishes a connection to a worker that is running at a remote space, and registers
            the worker at the local space.  After ConnectWorker is called, the worker to which the
            connection has been established is also available through the appspace's Resolve method.
            This method allows using addresses that are not displayable with a "hostname:port" pattern.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="workerAddress">The address of the worker in form "address/workername"</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.ConnectWorker``1(System.String,System.String)">
      <summary>
            Establishes a connection to a worker that is running at a remote space, and registers
            the worker at the local space. After ConnectWorker is called, the worker to which the
            connection has been established is also available through the appspace's Resolve method.
            This method allows using addresses that are not displayable with a "hostname:port" pattern.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="workerAddress">The address of the worker in form "address/workername"</param>
      <param name="localName">The name under which the worker should be registered locally.</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.ConnectWorker``1(System.String,System.String,System.String)">
      <summary>
            Establishes a connection to a worker that is running at a remote space, and registers
            the worker at the local space. After ConnectWorker is called, the worker to which the
            connection has been established is also available through the appspace's Resolve method.
            This method allows using addresses that are not displayable with a "hostname:port" pattern.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="commServiceName">The name of the communication service that should be used for communication with the worker.</param>
      <param name="workerAddress">The address of the worker in form "address/workername"</param>
      <param name="localName">The name under which the worker should be registered locally.</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.ConnectWorker``1(XcoAppSpaces.Contracts.Worker.PublishMode,System.String)">
      <summary>
            Establishes a connection to a worker that is running at a remote space, and registers
            the worker at the local space.  After ConnectWorker is called, the worker to which the
            connection has been established is also available through the appspace's Resolve method.
            This method allows using addresses that are not displayable with a "hostname:port" pattern.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="publish">Defines if the created worker proxy should be published so other appspace instances can connnect to it, and by that use the appspace instance to connect to the original worker.</param>
      <param name="workerAddress">The address of the worker in form "address/workername"</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.ConnectWorker``1(XcoAppSpaces.Contracts.Worker.PublishMode,System.String,System.String)">
      <summary>
            Establishes a connection to a worker that is running at a remote space, and registers
            the worker at the local space. After ConnectWorker is called, the worker to which the
            connection has been established is also available through the appspace's Resolve method.
            This method allows using addresses that are not displayable with a "hostname:port" pattern.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="publish">Defines if the created worker proxy should be published so other appspace instances can connnect to it, and by that use the appspace instance to connect to the original worker.</param>
      <param name="workerAddress">The address of the worker in form "address/workername"</param>
      <param name="localName">The name under which the worker should be registered locally.</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.ConnectWorker``1(XcoAppSpaces.Contracts.Worker.PublishMode,System.String,System.String,System.String)">
      <summary>
            Establishes a connection to a worker that is running at a remote space, and registers
            the worker at the local space. After ConnectWorker is called, the worker to which the
            connection has been established is also available through the appspace's Resolve method.
            This method allows using addresses that are not displayable with a "hostname:port" pattern.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="publishMode">Defines if the created worker proxy should be published so other appspace instances can connnect to it, and by that use the appspace instance to connect to the original worker.</param>
      <param name="commServiceName">The name of the communication service that should be used for communication with the worker.</param>
      <param name="workerAddress">The address of the worker in form "address/workername"</param>
      <param name="localName">The name under which the worker should be registered locally.</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.Dispose">
      <summary>
            Closes the appspace and disposes the CCR dispatcher if it was not handed in at startup.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoAppSpace.ConfigureWithConfigString(System.String)">
      <summary>
            Initializes the XcoAppSpace using the given config string.
            </summary>
      <param name="configString">The config string that should be used for initialization of the space.</param>
      <returns>An XcoAppSpaceConfiguration instance for further configuration of the space.</returns>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoAppSpace.Info">
      <summary>
            Provides meta information about the XcoAppSpace instance, e.g. information about 
            running workers and communication services.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoAppSpace.Credentials">
      <summary>
            The credentials that are used by the space to connect to remote workers.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoAppSpace.DefaultDispatcher">
      <summary>
            The CCR dispatcher that is used by the appspace.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoAppSpace.DefaultDispatcherQueue">
      <summary>
            The CCR dispatcher queue taht is used by the appspace.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoAppSpace.Address">
      <summary>
            The address of the space (that can be used by other spaces to connect to this space)
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoAppSpace.Errors">
      <summary>
            Port where errors are posted that occur during commmunication with Fother space instances
            and that have not been caught by causalities (e.g. errors during message deserialization 
            or security errors).
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoAppSpace.Configure">
      <summary>
            Returns an XcoAppSpaceConfig object for configuring and creating a new space instance.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoPublisher">
      <summary>
            The XcoPublisher manages a list of subscriptions in form of ports. It handles the
            processing of Subscribe and Unsubscribe messages, and the publishing messages
            to all subscribed ports.
            Is the base class for all generic XcoPublisher classes.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher.PublishUnknownType(System.Object)">
      <summary>
            Tries to publish a message of unknown type. An exception is thrown if the type
            of message is not supported by the XcoPublisher instance.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher.PublishWithType``1(``0)">
      <summary>
            Tries to publish a message with the given type. An exception is thrown if the type
            of message is not supported by the XcoPublisher instance.
            </summary>
      <param name="msg">The message to be published.</param>
      <typeparam name="T">The type under which the message should be published (msg must be assignable to this type).</typeparam>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoPublisher`1">
      <summary>
            The XcoPublisher is a worker extension that manages a list of subscriptions in 
            form of ports. It handles the processing of Subscribe and Unsubscribe messages, 
            and provides methods to publish messages to all subscribed ports.
            The the message types that can be published are defined by the XcoPublisher's
            generic types.
            </summary>
      <typeparam name="T">The type of message to be published.</typeparam>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`1.#ctor">
      <summary>
            Creates a new XcoPublisher.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`1.Publish(`0)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`1.Subscribe(Microsoft.Ccr.Core.Port{`0})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`1.Subscribe(Microsoft.Ccr.Core.Port{`0},System.Linq.Expressions.Expression{System.Predicate{`0}})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
      <param name="filterFunc">Predicate that can be used for filtering the published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`1.Unsubscribe(Microsoft.Ccr.Core.Port{`0})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoPublisher`2">
      <summary>
            The XcoPublisher is a worker extension that manages a list of subscriptions in 
            form of ports. It handles the processing of Subscribe and Unsubscribe messages, 
            and provides methods to publish messages to all subscribed ports.
            The the message types that can be published are defined by the XcoPublisher's
            generic types.
            </summary>
      <typeparam name="T0">The first message type to be published.</typeparam>
      <typeparam name="T1">The second message type to be published.</typeparam>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`2.#ctor">
      <summary>
            Creates a new XcoPublisher.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`2.Publish(`0)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`2.Publish(`1)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`2.Subscribe(Microsoft.Ccr.Core.Port{`0})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`2.Subscribe(Microsoft.Ccr.Core.Port{`0},System.Linq.Expressions.Expression{System.Predicate{`0}})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
      <param name="filterFunc">Predicate that can be used for filtering the published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`2.Unsubscribe(Microsoft.Ccr.Core.Port{`0})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`2.Subscribe(Microsoft.Ccr.Core.Port{`1})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`2.Subscribe(Microsoft.Ccr.Core.Port{`1},System.Linq.Expressions.Expression{System.Predicate{`1}})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
      <param name="filterFunc">Predicate that can be used for filtering the published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`2.Unsubscribe(Microsoft.Ccr.Core.Port{`1})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoPublisher`3">
      <summary>
            The XcoPublisher is a worker extension that manages a list of subscriptions in 
            form of ports. It handles the processing of Subscribe and Unsubscribe messages, 
            and provides methods to publish messages to all subscribed ports.
            The the message types that can be published are defined by the XcoPublisher's
            generic types.
            </summary>
      <typeparam name="T0">The first message type to be published.</typeparam>
      <typeparam name="T1">The second message type to be published.</typeparam>
      <typeparam name="T2">The third message type to be published.</typeparam>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`3.#ctor">
      <summary>
            Creates a new XcoPublisher.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`3.Publish(`0)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`3.Publish(`1)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`3.Publish(`2)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`3.Subscribe(Microsoft.Ccr.Core.Port{`0})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`3.Subscribe(Microsoft.Ccr.Core.Port{`0},System.Linq.Expressions.Expression{System.Predicate{`0}})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
      <param name="filterFunc">Predicate that can be used for filtering the published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`3.Unsubscribe(Microsoft.Ccr.Core.Port{`0})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`3.Subscribe(Microsoft.Ccr.Core.Port{`1})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`3.Subscribe(Microsoft.Ccr.Core.Port{`1},System.Linq.Expressions.Expression{System.Predicate{`1}})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
      <param name="filterFunc">Predicate that can be used for filtering the published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`3.Unsubscribe(Microsoft.Ccr.Core.Port{`1})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`3.Subscribe(Microsoft.Ccr.Core.Port{`2})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`3.Subscribe(Microsoft.Ccr.Core.Port{`2},System.Linq.Expressions.Expression{System.Predicate{`2}})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
      <param name="filterFunc">Predicate that can be used for filtering the published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`3.Unsubscribe(Microsoft.Ccr.Core.Port{`2})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoPublisher`4">
      <summary>
            The XcoPublisher is a worker extension that manages a list of subscriptions in 
            form of ports. It handles the processing of Subscribe and Unsubscribe messages, 
            and provides methods to publish messages to all subscribed ports.
            The the message types that can be published are defined by the XcoPublisher's
            generic types.
            </summary>
      <typeparam name="T0">The first message type to be published.</typeparam>
      <typeparam name="T1">The second message type to be published.</typeparam>
      <typeparam name="T2">The third message type to be published.</typeparam>
      <typeparam name="T3">The fourth message type to be published.</typeparam>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.#ctor">
      <summary>
            Creates a new XcoPublisher.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Publish(`0)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Publish(`1)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Publish(`2)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Publish(`3)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Subscribe(Microsoft.Ccr.Core.Port{`0})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Subscribe(Microsoft.Ccr.Core.Port{`0},System.Linq.Expressions.Expression{System.Predicate{`0}})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
      <param name="filterFunc">Predicate that can be used for filtering the published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Unsubscribe(Microsoft.Ccr.Core.Port{`0})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Subscribe(Microsoft.Ccr.Core.Port{`1})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Subscribe(Microsoft.Ccr.Core.Port{`1},System.Linq.Expressions.Expression{System.Predicate{`1}})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
      <param name="filterFunc">Predicate that can be used for filtering the published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Unsubscribe(Microsoft.Ccr.Core.Port{`1})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Subscribe(Microsoft.Ccr.Core.Port{`2})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Subscribe(Microsoft.Ccr.Core.Port{`2},System.Linq.Expressions.Expression{System.Predicate{`2}})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
      <param name="filterFunc">Predicate that can be used for filtering the published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Unsubscribe(Microsoft.Ccr.Core.Port{`2})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Subscribe(Microsoft.Ccr.Core.Port{`3})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Subscribe(Microsoft.Ccr.Core.Port{`3},System.Linq.Expressions.Expression{System.Predicate{`3}})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
      <param name="filterFunc">Predicate that can be used for filtering the published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`4.Unsubscribe(Microsoft.Ccr.Core.Port{`3})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoPublisher`5">
      <summary>
            The XcoPublisher is a worker extension that manages a list of subscriptions in 
            form of ports. It handles the processing of Subscribe and Unsubscribe messages, 
            and provides methods to publish messages to all subscribed ports.
            The the message types that can be published are defined by the XcoPublisher's
            generic types.
            </summary>
      <typeparam name="T0">The first message type to be published.</typeparam>
      <typeparam name="T1">The second message type to be published.</typeparam>
      <typeparam name="T2">The third message type to be published.</typeparam>
      <typeparam name="T3">The fourth message type to be published.</typeparam>
      <typeparam name="T4">The fifth message type to be published.</typeparam>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.#ctor">
      <summary>
            Creates a new XcoPublisher.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Publish(`0)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Publish(`1)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Publish(`2)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Publish(`3)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Publish(`4)">
      <summary>
            Publishes the given message to all subscribed ports.
            </summary>
      <param name="msg">The message to be published.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Subscribe(Microsoft.Ccr.Core.Port{`0})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Subscribe(Microsoft.Ccr.Core.Port{`0},System.Linq.Expressions.Expression{System.Predicate{`0}})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
      <param name="filterFunc">Predicate that can be used for filtering the published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Unsubscribe(Microsoft.Ccr.Core.Port{`0})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Subscribe(Microsoft.Ccr.Core.Port{`1})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Subscribe(Microsoft.Ccr.Core.Port{`1},System.Linq.Expressions.Expression{System.Predicate{`1}})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
      <param name="filterFunc">Predicate that can be used for filtering the published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Unsubscribe(Microsoft.Ccr.Core.Port{`1})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Subscribe(Microsoft.Ccr.Core.Port{`2})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Subscribe(Microsoft.Ccr.Core.Port{`2},System.Linq.Expressions.Expression{System.Predicate{`2}})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
      <param name="filterFunc">Predicate that can be used for filtering the published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Unsubscribe(Microsoft.Ccr.Core.Port{`2})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Subscribe(Microsoft.Ccr.Core.Port{`3})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Subscribe(Microsoft.Ccr.Core.Port{`3},System.Linq.Expressions.Expression{System.Predicate{`3}})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
      <param name="filterFunc">Predicate that can be used for filtering the published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Unsubscribe(Microsoft.Ccr.Core.Port{`3})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Subscribe(Microsoft.Ccr.Core.Port{`4})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Subscribe(Microsoft.Ccr.Core.Port{`4},System.Linq.Expressions.Expression{System.Predicate{`4}})">
      <summary>
            Subscribes the given port to receive published messages of the given port message type.
            </summary>
      <param name="port">The port that should receive published messages.</param>
      <param name="filterFunc">Predicate that can be used for filtering the published messages.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoPublisher`5.Unsubscribe(Microsoft.Ccr.Core.Port{`4})">
      <summary>
            Unsubscribes the given port from receiving published messages.
            </summary>
      <param name="port">The port that should be unsubscribed.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Exceptions.XcoException">
      <summary>
            XcoException is the base class for all Exceptions thrown in XcoAppSpaces.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoException.#ctor(System.String)">
      <summary>
            Creates a new XcoException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoException.#ctor(System.String,System.Exception)">
      <summary>
            Creates a new XcoException.
            </summary>
      <param name="message">The error message.</param>
      <param name="innerException">Inner Exception.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoException. Needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Exceptions.XcoSecurityException">
      <summary>
            Exception that is thrown when communication with a worker is not correctly authenticated or authorized.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoSecurityException.#ctor(System.String)">
      <summary>
            Creates a new XcoSecurityException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoSecurityException.#ctor(System.String,System.Exception)">
      <summary>
            Creates a new XcoSecurityException.
            </summary>
      <param name="message">The error message.</param>
      <param name="innerException">The inner exception that has been thrown.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoSecurityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoSecurityException. This constructor is needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Exceptions.XcoConfigurationException">
      <summary>
            Exception that is thrown when there is an error with the XcoAppSpace configuration.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoConfigurationException.#ctor(System.String)">
      <summary>
            Creates a new XcoConfigurationException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoConfigurationException. This constructor is needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Exceptions.XcoWorkerException">
      <summary>
            Exception that is thrown when there is an error instantiating a worker.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoWorkerException.#ctor(System.String)">
      <summary>
            Creates a new XcoWorkerException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoWorkerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoWorkerException. This constructor is needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Exceptions.XcoSubscriptionException">
      <summary>
            Exception that is thrown in case of an error when subscribing to a worker (e.g. the type of message that is subscribed
            to is unknown to the XcoPublisher).
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoSubscriptionException.#ctor(System.String)">
      <summary>
            Creates a new XcoSubscriptionException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoSubscriptionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoSubscriptionException. This constructor is needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Exceptions.XcoPublishException">
      <summary>
            Exception that is thrown in case of an error when publishing a message (e.g. the type of message to
            be published is unknown by the XcoPublisher).
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoPublishException.#ctor(System.String)">
      <summary>
            Creates a new XcoPublishException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoPublishException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoPublishException. This constructor is needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Exceptions.XcoCommunicationException">
      <summary>
            Exception that is thrown in case of an error related to remote communication (e.g. problems
            connecting to a remote worker).
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoCommunicationException.#ctor(System.String)">
      <summary>
            Creates a new XcoCommunicationException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoCommunicationException.#ctor(System.String,System.Exception)">
      <summary>
            Creates a new XcoCommunicationException.
            </summary>
      <param name="message">The error message.</param>
      <param name="innerException">The inner exception that has been thrown.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoCommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoCommunicationException. This constructor is needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Exceptions.XcoSerializationException">
      <summary>
            Exception that is thrown in case of errors related to serialization or deserialization of messages
            that are sent to other spaces.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoSerializationException.#ctor(System.String)">
      <summary>
            Creates a new XcoSerializationException.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoSerializationException.#ctor(System.String,System.Exception)">
      <summary>
            Creates a new XcoSerializationException.
            </summary>
      <param name="message">The error message.</param>
      <param name="innerException">The inner exception that has been thrown.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Exceptions.XcoSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new XcoSerializationException. This constructor is needed for serialization.
            </summary>
      <param name="info">SerializationInfo for handling type-specific serialization information.</param>
      <param name="context">StreamingContext for handling type-specific serialization information.</param>
    </member>
    <member name="T:XcoAppSpaces.Core.Communication.Connector">
      <summary>
            Remote communication component for AppSpace. Handles the transport of messages
            from/to remote workers and ports.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.Communication.Connector.#ctor">
      <summary>
            Creates a new Connector.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.Communication.Connector.Initialize(XcoAppSpaces.Contracts.Service.IXcoServiceRegistry)">
      <summary>
            Initializes the connector instance and gets all other needed services from the service registry.
            </summary>
      <param name="serviceRegistry">The service registry of the current appspace instance.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.Communication.Connector.IsLocal(System.String)">
      <summary>
            Checks a certain address if it is the address of the local space. This is the case if the
            address is either NULL of if it is equal (ignoring case) to the local address.
            </summary>
      <param name="address">The address to be checked.</param>
      <returns>True if the address refers to the local space.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.Communication.Connector.ConnectWorker``1(System.String,System.String,System.Net.ICredentials)">
      <summary>
            Establishes a connection to a worker that is running at a remote space. Creates a local
            proxy of the worker that allows posting messages that are automatically transported
            to the worker.
            If the worker does't exist or the connection to the space cannot be established, an
            XcoCommunicationException is thrown.
            This method is an alternative to the method taking an URI as address, being more flexible
            and therefore allowing things like Jabber usernames to be used.
            </summary>
      <typeparam name="TContract">The contract type of the worker to connect to.</typeparam>
      <param name="workerAddress">The address of the worker in den form "address/workername"</param>
      <param name="commServiceName">The name of the communication service that should be used to communicate with the worker (or null if the default communication service should be used).</param>
      <param name="credentials">The credentials that should be used to connect to the worker.</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.Communication.Connector.ConnectWorker``1(System.String,System.String,System.String,System.Net.ICredentials)">
      <summary>
            Establishes a connection to a worker that is running at a remote space. Creates a local
            proxy of the worker that allows posting messages that are automatically transported
            to the worker.
            If the worker does't exist or the connection to the space cannot be established, an
            XcoCommunicationException is thrown.
            </summary>
      <typeparam name="TContract">The contract type of the worker to connect to.</typeparam>
      <param name="name">The name of the worker.</param>
      <param name="address">The address of the space where the worker is running (in form hostname:port).</param>
      <param name="commServiceName">The name of the communication service that should be used to communicate with the worker (or null if the default communication service should be used).</param>
      <param name="credentials">The credentials that should be used to connect to the worker.</param>
      <returns>A worker contract instance that allows to post messages to the remote worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.Communication.Connector.Dispose">
      <summary>
            Disposes the connector.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.Communication.Connector.Start">
      <summary>
            Starts the connector.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.Communication.Connector.Stop">
      <summary>
            Stops the connector.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.Communication.Connector.LocalAddress">
      <summary>
            The local address of the space (in form hostname:port).
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.Communication.Connector.CommServices">
      <summary>
            The list of registered communication services.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.Communication.Connector.Errors">
      <summary>
            Port where communication errors are posted that are not caught by causalities.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.Communication.Connector.StartPriority">
      <summary>
            Start priority of the connector (needs to be started before the communication services).
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Transport.Sockets.Config">
      <summary>
            Configuration contains settings that are target for possible later outsourcing
            into a settings file.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Transport.Sockets.ConfigStringInterpreter">
      <summary>
            Configuration string interpreter for the XcoTCPTransportService.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Transport.Sockets.ConfigStringInterpreter.ConfigPort">
      <summary>
            Config key for setting the port.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Transport.Sockets.ConfigStringInterpreter.ConfigName">
      <summary>
            Config key for setting the name.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Transport.Sockets.ConfigStringInterpreter.ConfigIsDefault">
      <summary>
            Config key for setting if the service is the default communication service.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Transport.Sockets.ConfigStringInterpreter.InterpretDefinition">
      <summary>
            Action definition for interpretion
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Transport.Sockets.ConfigStringInterpreter.GetService">
      <summary>
            Get the current tcp service
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Transport.Sockets.FluentConfigExtensions">
      <summary>
            Defines extension methods for configuration of an XcoTCPTransportService using the fluent interface.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.FluentConfigExtensions.OnPort``1(XcoAppSpaces.Contracts.Service.IXcoServiceFluentConfiguration{XcoAppSpaces.Transport.Sockets.XcoTCPTransportService,``0},System.Int32)">
      <summary>
            Defines on which port the communication service should be running.
            </summary>
      <typeparam name="T">The type of the configuration object.</typeparam>
      <param name="config">The configuration object.</param>
      <param name="port">The port on which the communication service should be running.</param>
      <returns>The configuration object for further configuration with the fluent interface.</returns>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.FluentConfigExtensions.OnRandomPort``1(XcoAppSpaces.Contracts.Service.IXcoServiceFluentConfiguration{XcoAppSpaces.Transport.Sockets.XcoTCPTransportService,``0})">
      <summary>
            Defines that the communication service should be running on a random port.
            </summary>
      <typeparam name="T">The type of the configuration object.</typeparam>
      <param name="config">The configuration object.</param>
      <returns>The configuration object for further configuration with the fluent interface.</returns>
    </member>
    <member name="T:XcoAppSpaces.Transport.Sockets.TransferHelper">
      <summary>
             Helperclass for XcoMessage convert for transfer
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.TransferHelper.#ctor">
      <summary>
             Helper class for XcoMessages converts
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.TransferHelper.Convert(XcoAppSpaces.Contracts.Transport.XcoMessage)">
      <summary>
            Converts the XcoMessage to a byte[]
            </summary>
      <param name="msg">XcoMessage to convert</param>
      <returns>byte[] instance of the XcoMessage</returns>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.TransferHelper.Convert(System.IO.BinaryReader)">
      <summary>
            Convert byte[] to XcoMessage
            </summary>
      <param name="stream">read XcoMessage from stream</param>
      <returns>new XcoMessage instance</returns>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.TransferHelper.ReadData(System.IO.BinaryReader,System.Int32,System.Byte[]@)">
      <summary>
            Read data from stream
            </summary>
      <param name="stream">
      </param>
      <param name="gesamtLen">
      </param>
      <param name="content">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService">
      <summary>
            Communication Service that send/receives messages to/from remote spaces via
            TCP sockets. The service is able to either use connections only one-way, meaning
            two spaces communicating with each other always use two channels (one for sending
            and one for receiving), or two-way, where a single connection between to spaces
            is used to transfer messages in both ways.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService.#ctor">
      <summary>
            Creates a new XcoTCPTransportService.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService.#ctor(System.Int32)">
      <summary>
            Creates a new XcoTCPTransportService.
            </summary>
      <param name="port">The port where the service should be running.</param>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService.#ctor(System.String,System.Int32)">
      <summary>
            Creates a new XcoTCPTransportService.
            </summary>
      <param name="ipAddress">The local ip address where the service should be running.</param>
      <param name="port">The port where the service should be running.</param>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService.Start">
      <summary>
            Starts the communication service.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService.Stop">
      <summary>
            Stops the service and closes all open connections.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService.ReleaseConnections">
      <summary>
            Releases all currently active connections.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService.Send(XcoAppSpaces.Contracts.Transport.XcoMessage)">
      <summary>
            Sends a message to a remote space.
            </summary>
      <param name="msg">The messages that should be sent.</param>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService.CheckConnectionTimeouts(System.Object)">
      <summary>
            Checks if any TCPClients have run into a timeout (not sent any message for a 
            defined amount of time), and removes these clients and closes their connections.
            </summary>
      <param name="timerInfo">Field for additional info from the timer that starts the method (is ignored because not additional info needed).</param>
    </member>
    <member name="M:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService.Dispose">
      <summary>
            Stops the service and closes all open connections.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService.Port">
      <summary>
            The port on which the service is running.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Transport.Sockets.XcoTCPTransportService.LocalAddress">
      <summary>
            The Address of the server.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Transport.MSMQ.ConfigStringInterpreter">
      <summary>
            Configuration string interpreter for the XcoMSMQTransportService.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Transport.MSMQ.ConfigStringInterpreter.ConfigQueueName">
      <summary>
            Config key for setting the queue name.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Transport.MSMQ.ConfigStringInterpreter.ConfigName">
      <summary>
            Configuration key for setting the name.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Transport.MSMQ.ConfigStringInterpreter.ConfigIsDefault">
      <summary>
            Configuration key for setting if the service is the default communication service.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Transport.MSMQ.ConfigStringInterpreter.ConfigDisposeQueue">
      <summary>
            Remove queue after using
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Transport.MSMQ.ConfigStringInterpreter.InterpretDefinition">
      <summary>
            Action definition for interpretion
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Transport.MSMQ.ConfigStringInterpreter.GetService">
      <summary>
            Get the current tcp service
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Transport.MSMQ.FluentConfigExtensions">
      <summary>
            Defines extension methods for configuration of an XcoMSMQTransportService using the fluent interface.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.MSMQ.FluentConfigExtensions.WithQueueName``1(XcoAppSpaces.Contracts.Service.IXcoServiceFluentConfiguration{XcoAppSpaces.Transport.MSMQ.XcoMSMQTransportService,``0},System.String)">
      <summary>
            Defines on which queue-name the communication service should be read from.
            </summary>
      <typeparam name="T">The type of the configuration object.</typeparam>
      <param name="config">The configuration object.</param>
      <param name="queuename">The queue name on which the communication service should be read from.</param>
      <returns>The configuration object for further configuration with the fluent interface.</returns>
    </member>
    <member name="T:XcoAppSpaces.Transport.MSMQ.TransferHelper">
      <summary>
             Helperclass for XcoMessage convert for transfer
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.MSMQ.TransferHelper.#ctor">
      <summary>
             Helper class for XcoMessages converts
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.MSMQ.TransferHelper.Convert(XcoAppSpaces.Contracts.Transport.XcoMessage)">
      <summary>
            Converts the XcoMessage to a byte[]
            </summary>
      <param name="msg">XcoMessage to convert</param>
      <returns>byte[] instance of the XcoMessage</returns>
    </member>
    <member name="M:XcoAppSpaces.Transport.MSMQ.TransferHelper.Convert(System.IO.BinaryReader)">
      <summary>
            Convert byte[] to XcoMessage
            </summary>
      <param name="stream">read XcoMessage from stream</param>
      <returns>new XcoMessage instance</returns>
    </member>
    <member name="M:XcoAppSpaces.Transport.MSMQ.TransferHelper.ReadData(System.IO.BinaryReader,System.Int32,System.Byte[]@)">
      <summary>
            Read data from stream
            </summary>
      <param name="stream">
      </param>
      <param name="gesamtLen">
      </param>
      <param name="content">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:XcoAppSpaces.Transport.MSMQ.XcoMSMQTransportService">
      <summary>
            Communication Service that send/receives messages to/from remote spaces via
            MSMQ. The service uses one queue for reading messages.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.MSMQ.XcoMSMQTransportService.#ctor">
      <summary>
            Creates a new XcoMSMQTransportService.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.MSMQ.XcoMSMQTransportService.#ctor(System.String)">
      <summary>
            Creates a new XcoMSMQTransportService.
            </summary>
      <param name="queueName">The queueName where the service should read from.</param>
    </member>
    <member name="M:XcoAppSpaces.Transport.MSMQ.XcoMSMQTransportService.#ctor(System.String,System.Boolean)">
      <summary>
            Creates a new XcoMSMQTransportService.
            </summary>
      <param name="queueName">The queueName where the service should read from.</param>
      <param name="removeQueueOnStop">If true the queue will be removed upon disposal of communication service</param>
    </member>
    <member name="M:XcoAppSpaces.Transport.MSMQ.XcoMSMQTransportService.DeleteQueue">
      <summary>
            Delete queue 
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.MSMQ.XcoMSMQTransportService.Start">
      <summary>
            Starts the communication service.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.MSMQ.XcoMSMQTransportService.Stop">
      <summary>
            Stops the service and closes all open connections.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.MSMQ.XcoMSMQTransportService.ReleaseConnections">
      <summary>
            Releases all currently active connections.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.MSMQ.XcoMSMQTransportService.Send(XcoAppSpaces.Contracts.Transport.XcoMessage)">
      <summary>
            Sends a message to a remote space.
            </summary>
      <param name="msg">The messages that should be sent.</param>
    </member>
    <member name="M:XcoAppSpaces.Transport.MSMQ.XcoMSMQTransportService.CheckConnectionTimeouts(System.Object)">
      <summary>
            Checks if any TCPClients have run into a timeout (not sent any message for a 
            defined amount of time), and removes these clients and closes their connections.
            </summary>
      <param name="timerInfo">Field for additional info from the timer that starts the method (is ignored because not additional info needed).</param>
    </member>
    <member name="M:XcoAppSpaces.Transport.MSMQ.XcoMSMQTransportService.Dispose">
      <summary>
            Stops the service and closes all open connections.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Transport.MSMQ.XcoMSMQTransportService.RemoveQueueOnStop">
      <summary>
            Remove Queue after use if true
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Transport.MSMQ.XcoMSMQTransportService.QueueName">
      <summary>
            The message queue on which the service reads from.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Transport.MSMQ.XcoMSMQTransportService.LocalAddress">
      <summary>
            Returns the MSMQ name
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Transport.WCF.IBindingsHelper">
      <summary>
            Helper for different WCF Bindings
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Transport.WCF.BindingsHelper">
      <summary>
            Helper for different WCF Bindings
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Transport.WCF.BindingsHelper.usedBindingScheme">
      <summary>
            Get the current binding scheme
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.BindingsHelper.GenerateStandardNetTcp(System.Int32)">
      <summary>
            Generates an Uri for NetTcp binding.
            </summary>
      <param name="port">The port for the uri.</param>
      <returns>The generated uri.</returns>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.BindingsHelper.Convert(System.String)">
      <summary>
            Converts an address to be correct for current binding.
            </summary>
      <param name="address">The address to be converted.</param>
      <returns>The converted address.</returns>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.BindingsHelper.Convert(System.ServiceModel.Channels.Binding,System.String)">
      <summary>
            Converts the given address for the given binding type.
            </summary>
      <param name="bindingType">The binding type to be used.</param>
      <param name="address">The address to be converted.</param>
      <returns>The converted address.</returns>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.BindingsHelper.Convert(System.ServiceModel.NetNamedPipeBinding,System.String)">
      <summary>
            Converts the given address for the NetNamedPipeBinding.
            </summary>
      <param name="bindingType">The NetNamedPipeBinding type-information.</param>
      <param name="address">The address to be converted.</param>
      <returns>The converted address.</returns>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.BindingsHelper.Convert(System.ServiceModel.NetTcpBinding,System.String)">
      <summary>
            Converts the given address for the NetTcpBinding.
            </summary>
      <param name="bindingType">The NetTcpBinding type-information.</param>
      <param name="address">The address to be converted.</param>
      <returns>The converted address.</returns>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.BindingsHelper.ServerAddr(System.Uri)">
      <summary>
            Gets the address value that should be returned by the communication
            service's ServerAdress property (binding info is removed from the address).
            </summary>
      <param name="addr">The address.</param>
      <returns>The value for the ServerAddress property.</returns>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.BindingsHelper.Port(System.Uri)">
      <summary>
            Extracts the port value from the given address.
            </summary>
      <param name="addr">The address.</param>
      <returns>The port value.</returns>
    </member>
    <member name="T:XcoAppSpaces.Transport.WCF.ConfigStringInterpreter">
      <summary>
            Configuration string interpreter for the XcoWCFTransportService
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Transport.WCF.ConfigStringInterpreter.ConfigPort">
      <summary>
            Configuration key for setting the port.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Transport.WCF.ConfigStringInterpreter.ConfigName">
      <summary>
            Configuration key for setting the name.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Transport.WCF.ConfigStringInterpreter.ConfigIsDefault">
      <summary>
            Configuration key for setting if the service is the default communication service.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Transport.WCF.ConfigStringInterpreter.InterpretDefinition">
      <summary>
            Action definition for interpretion
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Transport.WCF.ConfigStringInterpreter.GetService">
      <summary>
            Get the current WCF service
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Transport.WCF.FluentConfigExtensions">
      <summary>
            Defines extension methods for configuration of an XcoWCFTransportService using the fluent interface.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.FluentConfigExtensions.OnPort``1(XcoAppSpaces.Contracts.Service.IXcoServiceFluentConfiguration{XcoAppSpaces.Transport.WCF.XcoWCFTransportService,``0},System.Int32)">
      <summary>
            Defines on which port the communication service should be running.
            </summary>
      <typeparam name="T">The type of the configuration object.</typeparam>
      <param name="config">The configuration object.</param>
      <param name="port">The port on which the communication service should be running.</param>
      <returns>The configuration object for further configuration with the fluent interface.</returns>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.FluentConfigExtensions.OnRandomPort``1(XcoAppSpaces.Contracts.Service.IXcoServiceFluentConfiguration{XcoAppSpaces.Transport.WCF.XcoWCFTransportService,``0})">
      <summary>
            Defines that the communication service should be running on a random port.
            </summary>
      <typeparam name="T">The type of the configuration object.</typeparam>
      <param name="config">The configuration object.</param>
      <returns>The configuration object for further configuration with the fluent interface.</returns>
    </member>
    <member name="T:XcoAppSpaces.Transport.WCF.IRemoteSpaceService">
      <summary>
            Interface definition for the WCF service used to communication with remote spaces.
            All communication is one-way and session oriented.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.IRemoteSpaceService.Connect">
      <summary>
            Initiates a connection to a remote space. This is always the first Method that
            has to be called when wanting to communicate with a remote space.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.IRemoteSpaceService.Disconnect">
      <summary>
            Terminates the connection to a remote space. This is always the last Method that
            has to be called when wanting to communicate with a remote space.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.IRemoteSpaceService.SendMessage(XcoAppSpaces.Contracts.Transport.XcoMessage)">
      <summary>
            Sends a message to a remote space (serialized into a byte array).
            </summary>
      <param name="data">The message to be sent, serialized into a byte array.</param>
    </member>
    <member name="T:XcoAppSpaces.Transport.WCF.SpaceServiceChannel">
      <summary>
            Interface definition for the service channel of the space.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Transport.WCF.RemoteSender">
      <summary>
            Sender for communication with remote spaces. Uses an IRemoteSpaceService to communicate
            with service hosts of remote spaces.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Transport.WCF.RemoteSender.LoadConfigurationDelegate">
      <summary>
            Supports different sender-configurations
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.RemoteSender.#ctor(System.String,XcoAppSpaces.Contracts.Logging.IXcoLogger)">
      <summary>
            Creates a new RemoteSender. A new IRemoteSpaceService object is created that communicates
            with the given address, with help of the ChannelFactory class.
            </summary>
      <param name="address">The address of the remote space, in binding form.</param>
      <param name="log">Logger to use for logging.</param>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.RemoteSender.#ctor(System.String,XcoAppSpaces.Transport.WCF.RemoteSender.LoadConfigurationDelegate,XcoAppSpaces.Contracts.Logging.IXcoLogger)">
      <summary>
            Creates a new RemoteSender. A new IRemoteSpaceService object is created that communicates
            with the given address, with help of the ChannelFactory class.
            </summary>
      <param name="address">The address of the remote space, in binding form.</param>
      <param name="loadConfig">Delegate for loading the service configuration.</param>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.RemoteSender.Connect">
      <summary>
            Initiates a connection by calling the Connect method of the IRemoteSpaceService object.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.RemoteSender.SendDisable">
      <summary>
            Test - After channel shutdown, sending is not allowed
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.RemoteSender.Disconnect">
      <summary>
            Terminates the connection by calling the Disconnect method of the IRemoteSpaceService object.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.RemoteSender.SendMessage(XcoAppSpaces.Contracts.Transport.XcoMessage)">
      <summary>
            Sends a message by first serializing it and the using the IRemoteSpaceService object to send it.
            The last send time is set to the current time.
            </summary>
      <param name="msg">The Message to be sent.</param>
    </member>
    <member name="P:XcoAppSpaces.Transport.WCF.RemoteSender.SessionID">
      <summary>
            The session id of the client channel that is used by communicating with the remote space service.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Transport.WCF.RemoteSender.LastSendTime">
      <summary>
            The time when this RemoteSender has last sent a message.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Transport.WCF.SpacePortal">
      <summary>
            Implementation for the server side endpoint of the WCF service for communication with remote
            spaces. Named SpacePortal, because it provides a portal to the space for any incoming remote
            communication.
            Definition of the service behavior: Only one instance is running at the server, but can be
            used concurrent.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.SpacePortal.#ctor(System.Uri,XcoAppSpaces.Contracts.Transport.IXcoMessageReceiverService,XcoAppSpaces.Contracts.Transport.IXcoTransportService,XcoAppSpaces.Contracts.Logging.IXcoLogger)">
      <summary>
            Creates a new SpacePortal.
            </summary>
      <param name="addr">The address in which the service host is running (here only needed for information purposes).</param>
      <param name="messageReceived">The method that should be called when a message arrives.</param>
      <param name="commService">The communication service.</param>
      <param name="log">Logger to be used for logging.</param>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.SpacePortal.Connect">
      <summary>
            Does nothing, because it is only needed for connection initiation (which is managed
            internally by WCF).
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.SpacePortal.Disconnect">
      <summary>
            Does nothing, because it is only needed for connection termination (which is managed
            internally by WCF).
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.SpacePortal.SendMessage(XcoAppSpaces.Contracts.Transport.XcoMessage)">
      <summary>
            Processes a message that has been received. The message is deserialized and the corresponding
            process method is called.
            </summary>
      <param name="data">The serialized message that has been received.</param>
    </member>
    <member name="T:XcoAppSpaces.Transport.WCF.XcoWCFTransportService">
      <summary>
            Service that manages incoming and outgoing messages from/to remote spaces by use of WCF. Incoming
            messages are received by a hosted SpacePortal service. Outgoing messages are sent by RemoteSender 
            objects, the currently open RemoteSenders are managed in a list. A Timer regularly checks if any 
            connections to remote spaces have run into a timeout, and closes and removes such connections.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Transport.WCF.XcoWCFTransportService.LoadHostConfigurationDelegate">
      <summary>
            Supports different host-configurations
            </summary>
      <param name="coreUri">Uri from core</param>
      <param name="spacePortal">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:XcoAppSpaces.Transport.WCF.XcoWCFTransportService.NewRemoteSenderDelegate">
      <summary>
            Supports different constructors
            </summary>
      <param name="addr">
      </param>
      <param name="serializationHelper">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.XcoWCFTransportService.#ctor(System.Int32)">
      <summary>
            Creates a new XcoWCFTransportService.
            </summary>
      <param name="port">The port that should be used (net.tcp).</param>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.XcoWCFTransportService.#ctor(System.String)">
      <summary>
            Creates a new XcoWCFTransportService.
            </summary>
      <param name="address">The address that should be used (binding-specific).</param>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.XcoWCFTransportService.GenerateAddrUri(System.Int32)">
      <summary>
            Generate address uri from port definition
            </summary>
      <param name="port">
      </param>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.XcoWCFTransportService.#ctor">
      <summary>
            Creates a new RemoteServer.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.XcoWCFTransportService.Start">
      <summary>
            Starts the service host in an own Thread, and waits until the service host is opened. 
            An exception is thrown if an error occured while opening the service host.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.XcoWCFTransportService.CreateRandomPort">
      <summary>
            Creates Random-Port for the WCF-Service
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.XcoWCFTransportService.LoadConfiguration(System.Uri,XcoAppSpaces.Transport.WCF.SpacePortal)">
      <summary>
            Load specific configuration settings.       
            </summary>
      <param name="coreUri">Baseaddress for the wcf-service</param>
      <param name="_spacePortal">The space-portal instance for WCF hosting</param>
      <returns>ServiceHost from the SpacePortal</returns>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.XcoWCFTransportService.InitDefaultWCFConnection(System.Uri,XcoAppSpaces.Transport.WCF.SpacePortal)">
      <summary>
            Init default wcf-properties
            </summary>
      <param name="coreUri">
      </param>
      <param name="_spacePortal">
      </param>
      <returns>Default WCF-Service-Host</returns>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.XcoWCFTransportService.CheckAddressForSharedPort">
      <summary>
            Check if shared port is in use
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.XcoWCFTransportService.RunServiceHost">
      <summary>
            Method to start in an own thread, that opens a new service host at the given port to receive
            messages from remote kernels. The SpacePortal class is used as service.
            Note: ServiceHost must run in an own thread, otherwise the host will not work when used in
            Windows Forms Applications. This seems to be the case because of some collision with messaging
            in WCF and Windows Forms.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.XcoWCFTransportService.CheckConnectionTimeouts(System.Object)">
      <summary>
            Checks if any RemoteSenders have run into a timeout (not sent any message for a 
            defined amount of time), and removes these senders and closes their connections.
            </summary>
      <param name="timerInfo">Field for additional info from the timer that starts the method (is ignored because not additional info needed).</param>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.XcoWCFTransportService.Send(XcoAppSpaces.Contracts.Transport.XcoMessage)">
      <summary>
            Sends a message to a remote space. If no remote sender for this message exists yet,
            a new RemoteSender is created and stored in the list of currently open RemoteSenders.
            If a RequestMessage can not be sent, an ResponseMessage with an error is created and given
            back to the Request by using the processResponse method.
            </summary>
      <param name="msg">The message to be sent.</param>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.XcoWCFTransportService.Stop">
      <summary>
            Closes the service host, stops the timeout checking and disconnects all senders that 
            are currently connected to other spaces.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.XcoWCFTransportService.Dispose">
      <summary>
            Closes the service host, stops the timeout checking and disconnects all senders that 
            are currently connected to other spaces.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.XcoWCFTransportService.ReleaseConnections">
      <summary>
            Release current active connections.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Transport.WCF.XcoWCFTransportService.ShutdownRemoteSender(System.String)">
      <summary>
            Close the RemoteSender because the connected channel has closed
            </summary>
      <param name="channelSessionID">sessionID of closed channel</param>
    </member>
    <member name="P:XcoAppSpaces.Transport.WCF.XcoWCFTransportService.ConfigLoader">
      <summary>
            Load different WCF-Configurations for the servicehost.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Transport.WCF.XcoWCFTransportService.CreateNewRemoteSender">
      <summary>
            Load different RemoteSender instances
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Transport.WCF.XcoWCFTransportService.SharedPortName">
      <summary>
            Name for this instance on the used port
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Transport.WCF.XcoWCFTransportService.Port">
      <summary>
            The port on which the service host is running.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Transport.WCF.XcoWCFTransportService.LocalAddress">
      <summary>
            The Address of the Server.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Logging.IXcoLogger">
      <summary>
            Interface definition for Class used for Logging in the appspace. Defines methods
            for all needed message severity levels.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Logging.IXcoLogger.Debug(System.String)">
      <summary>
            Logs a debug message.
            </summary>
      <param name="msg">The message to be logged.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Logging.IXcoLogger.Info(System.String)">
      <summary>
            Logs an Info message.
            </summary>
      <param name="msg">The message to be logged.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Logging.IXcoLogger.Warn(System.String)">
      <summary>
            Logs a warning message.
            </summary>
      <param name="msg">The message to be logged.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Logging.IXcoLogger.Error(System.String)">
      <summary>
            Logs an error message.
            </summary>
      <param name="msg">The message to be logged.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Logging.IXcoLogger.Error(System.String,System.Exception)">
      <summary>
            Logs an error message.
            </summary>
      <param name="msg">The message to be logged.</param>
      <param name="ex">The exception that was thrown.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Logging.IXcoLogger.Fatal(System.String)">
      <summary>
            Logs a fatal error message.
            </summary>
      <param name="msg">The message to be logged.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Logging.IXcoLogger.Fatal(System.String,System.Exception)">
      <summary>
            Logs a fatal error message.
            </summary>
      <param name="msg">The message to be logged.</param>
      <param name="ex">The exception that was thrown.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Logging.XcoLoggerFactory">
      <summary>
            Factory for creating Loggers. (Logger factory is needed because the different
            components within the appspace require loggers with different names and types,
            so adding a single logger instance to the space is not sufficient.)
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Contracts.Logging.XcoLoggerFactory.CreateInstanceDefault">
      <summary>
            Default function for creating a new IXcoLogger Instance
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Contracts.Logging.XcoLoggerFactory.CreateInstance">
      <summary>
            Function for creating a new IXcoLogger Instance. Can be overwritten.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Logging.TraceSourceLogger">
      <summary>
            Logger class used for logging in the Kernel. Uses the .Net TraceSource class to output 
            the log messages. Settings for this Logger can be easily done in the App.config.
            By default the Logger only outputs messages logged as fatal.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Logging.TraceSourceLogger.#ctor(System.String,System.Diagnostics.SourceLevels)">
      <summary>
            Creates a new Logger.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Logging.TraceSourceLogger.Debug(System.String)">
      <summary>
            Logs a debug message (using TraceEventType.Verbose).
            </summary>
      <param name="msg">The message to be logged.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Logging.TraceSourceLogger.Info(System.String)">
      <summary>
            Logs an Info message (using TraceEventType.Information).
            </summary>
      <param name="msg">The message to be logged.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Logging.TraceSourceLogger.Warn(System.String)">
      <summary>
            Logs a warning message (using TraceEventType.Warning).
            </summary>
      <param name="msg">The message to be logged.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Logging.TraceSourceLogger.Error(System.String)">
      <summary>
            Logs an error message (using TraceEventType.Error).
            </summary>
      <param name="msg">The message to be logged.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Logging.TraceSourceLogger.Error(System.String,System.Exception)">
      <summary>
            Logs an error message (using TraceEventType.Error).
            </summary>
      <param name="msg">The message to be logged.</param>
      <param name="ex">The exception that was thrown.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Logging.TraceSourceLogger.Fatal(System.String)">
      <summary>
            Logs a fatal error message (using TraceEventType.Critical).
            </summary>
      <param name="msg">The message to be logged.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Logging.TraceSourceLogger.Fatal(System.String,System.Exception)">
      <summary>
            Logs a fatal error message (using TraceEventType.Critical).
            </summary>
      <param name="msg">The message to be logged.</param>
      <param name="ex">The exception that was thrown.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Security.IXcoClientCredentials">
      <summary>
            Credentials that can be used to authenticate a user.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Security.IXcoClientCredentials.User">
      <summary>
            The username.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Security.IXcoClientCredentials.Password">
      <summary>
            The (encrypted) password.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Security.IXcoSecurityService">
      <summary>
            Interface 
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Security.IXcoSecurityService.GetClientCredentials(System.Net.ICredentials,System.String)">
      <summary>
            Gets xco client credentials from a given credentials object and for the given address, that can be 
            transfered to a remote space and used to authenticate a user at a remote space.
            </summary>
      <param name="credentials">The ICredentials object where to read the credentials from.</param>
      <param name="address">The address for which the credentials are needed.</param>
      <returns>A new IXcoClientCredentials instance containing the needed authentication information.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Security.IXcoSecurityService.Authenticate(System.String,XcoAppSpaces.Contracts.Security.IXcoClientCredentials)">
      <summary>
            Authenticates access for the given user to the space. It is checked if the username and password
            are valid. A sessionID is generated if authentication is successful. If the user already has an open
            session, the id of the existing session is returned.
            </summary>
      <param name="address">The host address of the user.</param>
      <param name="credentials">The credentials of the user.</param>
      <returns>The Guid of the user session, or Guid.Empty if authentication has failed.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Security.IXcoSecurityService.Authorize(System.String,System.Guid,Microsoft.Ccr.Core.IPort)">
      <summary>
            Authorizes access for the user of the given session to the given worker. Authorization is successful
            if the user is allowed to access at least one port of the worker.
            </summary>
      <param name="address">The host address of the user.</param>
      <param name="sessionID">The sessionID of the user (that was generated during user authentication).</param>
      <param name="worker">The worker instance.</param>
      <returns>True if the user is authorized to access the worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Security.IXcoSecurityService.CheckPermission(Microsoft.Ccr.Core.IPort,System.Object,System.String,System.Guid)">
      <summary>
            Checks if certain port of a worker can be accessed by a specific session. An XcoSecurityException is thrown
            if the operation is not permitted.
            </summary>
      <param name="worker">The worker that should be accessed.</param>
      <param name="message">The message that should be posted to the worker.</param>
      <param name="address">The address ot the sender of the message.</param>
      <param name="sessionID">The ID of the session that the sender uses for communication.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Security.XcoAuthenticationResult">
      <summary>
            Result of an authentication with an IXcoSecurityService instance.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Security.XcoAuthenticationResult.IsAuthenticated">
      <summary>
            True if the authentication was successful (meaning username and password were correct).
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Security.XcoAuthenticationResult.SessionID">
      <summary>
            The session id that the user must use to access the worker.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Security.XcoSecurityPermissionAttribute">
      <summary>
            Attribute that can be added to a worker or one of its message processor methods to
            allow a certain role to access this worker (or only certain ports of the worker).
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Security.XcoSecurityPermissionAttribute.#ctor(System.String)">
      <summary>
            Creates a new XcoSecurityPermissionAttribute.
            </summary>
      <param name="rolename">The rolename that should have permission.</param>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Security.XcoSecurityPermissionAttribute.Rolename">
      <summary>
            The rolename that should have permission.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Security.XcoSecurityPolicy">
      <summary>
            List of security policies for handling remote access to workers.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Contracts.Security.XcoSecurityPolicy.Permissive">
      <summary>
            Anonymous users are allowed (can access all workers/ports that are not restricted to certain roles).
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Contracts.Security.XcoSecurityPolicy.Restrictive">
      <summary>
            No anonymous users are allowed.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Security.Basic.ConfigStringInterpreter">
      <summary>
            Configuration string interpreter for the XcoBasicSecurityService.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Security.Basic.ConfigStringInterpreter.ConfigPolicy">
      <summary>
            Config key for setting the policy.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Security.Basic.ConfigStringInterpreter.ConfigStore">
      <summary>
            Config key for setting the path of the user store.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Security.Basic.ConfigStringInterpreter.InterpretDefinition">
      <summary>
            Action definition for interpretion
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Security.Basic.ConfigStringInterpreter.GetService">
      <summary>
            Get the current tcp service
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Security.Basic.XcoNoSecurityService">
      <summary>
            Security Service that just permits all actions.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Security.Basic.PasswordUtil.CreatePasswordHash(System.String)">
      <summary>
            Creates a hash for the given password string using SHA512 algorithm.
            </summary>
      <param name="valueToHash">The password string to hash.</param>
      <returns>The hash value.</returns>
    </member>
    <member name="M:XcoAppSpaces.Security.Basic.PasswordUtil.AreEqual(System.Byte[],System.Byte[])">
      <summary>
            Compares two hashes, returns true if they are equal.
            </summary>
      <param name="pw1">First hash.</param>
      <param name="pw2">Second hash.</param>
      <returns>true if the hashes are equal.</returns>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Serialization.IXcoSerializer">
      <summary>
            Interface definition for classes used for serialization and deserialization of 
            objects (used for remote communication and for serialized data storage).
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Serialization.IXcoSerializer.Serialize(System.Object)">
      <summary>
            Serializes an object into a byte array.
            </summary>
      <param name="element">The object to be serialized.</param>
      <returns>The serialized object.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Serialization.IXcoSerializer.Deserialize(System.Byte[])">
      <summary>
            Deserializes an object from a byte array.
            </summary>
      <param name="element">The serialized object.</param>
      <returns>The object that has been deserialized.</returns>
    </member>
    <member name="T:XcoAppSpaces.Serialization.Binary.XcoBinarySerializer">
      <summary>
            Helper class for serialization and deserialization of objects (used in
            communication with remote spaces). Uses the BinaryFormatter.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Serialization.Binary.XcoBinarySerializer.Serialize(System.Object)">
      <summary>
            Serializes an object into a byte array.
            </summary>
      <param name="element">The object to be serialized.</param>
      <returns>The serialized object.</returns>
    </member>
    <member name="M:XcoAppSpaces.Serialization.Binary.XcoBinarySerializer.Deserialize(System.Byte[])">
      <summary>
            Deserializes an object from a byte array.
            </summary>
      <param name="element">The serialized object.</param>
      <returns>The object that has been deserialized.</returns>
    </member>
    <member name="M:XcoAppSpaces.Serialization.Binary.XcoBinarySerializer.Deserialize(System.IO.Stream)">
      <summary>
            Deserializes an object from a byte array.
            </summary>
      <param name="stream">The serialized object.</param>
      <returns>The object that has been deserialized.</returns>
    </member>
    <member name="T:XcoAppSpaces.Contracts.CcrWiring.ICcrWirer">
      <summary>
            Service for wiring workers, worker proxies and remote ports with the Ccr
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrWiring.ICcrWirer.CreateWorker``2(Microsoft.Ccr.Core.DispatcherQueue)">
      <summary>
            Creates a new Worker and wires the worker ports with the message handlers contained in the worker class.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker.</typeparam>
      <param name="dpq">The dispatcher queue that should be used for wiring the worker, or null if space's the default dispatcher queue should be used.</param>
      <returns>A WorkerInfo object containing the worker instance and additional information that has been gathered during the worker wiring.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrWiring.ICcrWirer.WireWorker``1(``0,Microsoft.Ccr.Core.DispatcherQueue)">
      <summary>
            Wires a given worker's ports with its message handlers.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="worker">The worker instance.</param>
      <param name="dpq">The dispatcher queue that should be used for wiring the worker, or null if space's the default dispatcher queue should be used.</param>
      <returns>A WorkerInfo object containing the worker instance and additional information that has been gathered during the worker wiring.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrWiring.ICcrWirer.UnwireWorker(Microsoft.Ccr.Core.IPort)">
      <summary>
            Removes all registered receiver tasks from all ports of the worker.
            </summary>
      <param name="worker">The worker that should be unwired.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrWiring.ICcrWirer.CreateWorkerProxy``1(XcoAppSpaces.Contracts.Messaging.WorkerProxyInfo)">
      <summary>
            Creates a worker proxy for a remote worker from the given parameters.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker (must have an empty constructor so it can be instantiated as a proxy).</typeparam>
      <param name="proxyInfo">Information that is needed to create the worker proxy, like name and address of the worker.</param>
      <returns>The created worker proxy.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrWiring.ICcrWirer.GetPortSerializationInfo(Microsoft.Ccr.Core.IPort)">
      <summary>
            Gets a serialization info object that contains all information that is needed by the receiving space
            to deserialize the worker. The current serialization context can be used to get the local adress, and
            to register the port at the local space and get a unique id for the port, if it is not already
            a remote port.
            </summary>
      <param name="port">The port to be serialized.</param>
      <returns>Object containing the info that must be sent to the remote space for deserialization of the port.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrWiring.ICcrWirer.WireRemotePort(Microsoft.Ccr.Core.IPort,XcoAppSpaces.Contracts.CcrWiring.XcoPortSerializationInfo)">
      <summary>
            Wires a port using the given serialization info, so that it is ready for remote communication. The
            current serialization context can be used to get the name of the communication service that should be
            used to send messages to the original port.
            </summary>
      <param name="port">The port to be wired.</param>
      <param name="portSerializationInfo">Info that is needed for wiring the remote port, like the port's id and remote address.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.CcrWiring.WorkerInfo`1">
      <summary>
            Class that contains information about a worker that is acquired during creation an wiring
            of the worker.
            </summary>
      <typeparam name="T">The contract type of the worker.</typeparam>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrWiring.WorkerInfo`1.#ctor(`0,System.Collections.Generic.List{XcoAppSpaces.Contracts.Service.XcoServiceAttributeInfo},System.Collections.Generic.Dictionary{System.Type,XcoAppSpaces.Core.XcoProcessorAttribute})">
      <summary>
            Creates a new WorkerInfo.
            </summary>
      <param name="instance">The worker instance.</param>
      <param name="serviceAttributes">List of attributes that are assigned to the worker and could be of interest to other services of the space.</param>
      <param name="processorAttributes">List of attributes of the processors of this worker.</param>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrWiring.WorkerInfo`1.Instance">
      <summary>
            The worker instance.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrWiring.WorkerInfo`1.ServiceAttributes">
      <summary>
            List of attributes that are assigned to the worker and could be of interest to other services of the space.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrWiring.WorkerInfo`1.ProcessorAttributes">
      <summary>
            List of attributes of the processors of this worker.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.CcrWiring.XcoPortSerializationInfo">
      <summary>
            Infomation about a Port or PortSet concerning serialization.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrWiring.XcoPortSerializationInfo.#ctor(System.String,System.Guid,System.Type[])">
      <summary>
            Creates a new XcoPortSerializationInfo,
            </summary>
      <param name="remoteAddress">The remote address of the port.</param>
      <param name="remotePortGuid">The id of the port.</param>
      <param name="messageTypes">The message types that can be posted to the port(set).</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrWiring.XcoPortSerializationInfo.MakeRemote(System.String,System.Guid)">
      <summary>
            Adds remote information to the given XcoPortSerializationInfo.
            </summary>
      <param name="remoteAddress">The remote address of the port.</param>
      <param name="remotePortGuid">The id of the port.</param>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrWiring.XcoPortSerializationInfo.RemoteAddress">
      <summary>
            The remote address of the port.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrWiring.XcoPortSerializationInfo.RemotePortGuid">
      <summary>
            The id of the port.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrWiring.XcoPortSerializationInfo.MessageTypes">
      <summary>
            The message types that can be posted to the port(set).
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrWiring.XcoPortSerializationInfo.IsRemote">
      <summary>
            True if the XcoPortSerializationInfo contains remote information (remote address and port id).
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.CcrDispatching.ICcrDispatcherService">
      <summary>
            Service that gives access to the Ccr Dispatcher and DispatcherQueue of an appspace instance.
            The service can be used by other services of the space to get access to the space's
            Dispatcher and DispatcherQueue.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrDispatching.ICcrDispatcherService.Dispatcher">
      <summary>
            The Ccr Dispatcher.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrDispatching.ICcrDispatcherService.DispatcherQueue">
      <summary>
            The Ccr DispatcherQueue.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.CcrExtensions.IRemotableTask">
      <summary>
            Interface definition for a remotable ccr task (a ccr task that can send messages to a remote ccr port or portset).
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrExtensions.IRemotableTask.RemoteAddress">
      <summary>
            The remote address of the original port or portset.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrExtensions.IRemotableTask.CommServiceName">
      <summary>
            The name of the transport service that should be used to send messages.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrExtensions.IRemotableTask.PortGuid">
      <summary>
            The id of the original port or portset.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.CcrExtensions.PortHelpers">
      <summary>
            This class adds extension methods to the port that are needed at the appspace for working with local and remote ports.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrExtensions.PortHelpers.GetMessageType(Microsoft.Ccr.Core.IPort)">
      <summary>
            Gets the message type of a port.
            </summary>
      <param name="port">The port.</param>
      <returns>The type of messages that can be posted to the port.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrExtensions.PortHelpers.GetMessageTypes(Microsoft.Ccr.Core.IPortSet)">
      <summary>
            Gets the message types of a portset.
            </summary>
      <param name="portSet">The portset.</param>
      <returns>The types of messages that can be posted to the portset.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrExtensions.PortHelpers.GetPortInfo(Microsoft.Ccr.Core.IPort)">
      <summary>
            Gets infos that are available for this port about remote communication.
            </summary>
      <param name="port">The port.</param>
      <returns>Remote communication information about this port.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrExtensions.PortHelpers.UnregisterAllReceiverTasks(Microsoft.Ccr.Core.IPort)">
      <summary>
            Unregisters all receiver tasks from the port.
            </summary>
      <param name="port">The port.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.CcrExtensions.XcoPortInfo">
      <summary>
            Infomation about a Port concerning remote communication.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.CcrExtensions.XcoPortInfo.#ctor(System.Boolean,System.String,System.String,System.Guid)">
      <summary>
            Creates a new XcoPortInfo.
            </summary>
      <param name="isRemotePort">True if the port is a remote port.</param>
      <param name="remoteAddress">The remote address where the port is hosted, or null if the port is local.</param>
      <param name="commServiceName">The name of the transport service that the port uses, or null if the port is local.</param>
      <param name="remotePortID">The id of the port, or Guid.Empty if the port is local.</param>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrExtensions.XcoPortInfo.IsRemotePort">
      <summary>
            True if the port is a remote port.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrExtensions.XcoPortInfo.RemoteAddress">
      <summary>
            The remote address where the port is hosted, or null if the port is local.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrExtensions.XcoPortInfo.RemotePortID">
      <summary>
            The id of the port, or Guid.Empty if the port is local.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.CcrExtensions.XcoPortInfo.CommServiceName">
      <summary>
            The name of the transport service that the port uses, or null if the port is local.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoProcessorAttribute">
      <summary>
            Base class for the attributes to mark processor methods for ccr processing.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoProcessorAttribute.MessageTransferMode">
      <summary>
            The mode in which messages coming from remote spaces are transferred for this worker port.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.MessageTransferMode">
      <summary>
            Defines the mode for transferring messages for a certain worker port when coming from remote spaces.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Core.MessageTransferMode.Parallel">
      <summary>
            Messages are transferred in parallel. This provides maximal performance, but it is not guaranteed
            that the messages arrive in the order in which they are posted.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Core.MessageTransferMode.Sequential">
      <summary>
            Messages are transferred sequentially. This guarantees that the messages arrive exactly in the
            order in which they were posted.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoWorkerExtensionAttribute">
      <summary>
            Marks a class as worker extension. When creating a worker, all methods
            of a worker extension class that are marked with XcoConcurrent, XcoExclusive
            or XcoTeardown are also taken into account as message processing methods.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoWorkerExtensionAttribute.#ctor">
      <summary>
            Creates a new XcoWorkerExtensionAttribute.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoWorkerExtensionAttribute.#ctor(System.Type[])">
      <summary>
            Creates a new XcoWorkerExtensionAttribute.
            </summary>
      <param name="required">The list of types for which a port must exist at the worker.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoWorkerExtensionAttribute.IsTypeRequired(System.Type)">
      <summary>
            Checks if the given type is required, meaning if a Port{Type} must exist at the worker for this type.
            </summary>
      <param name="type">The type to be checked.</param>
      <returns>True if the type is required.</returns>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoWorkerExtensionAttribute.Required">
      <summary>
            The list of required types (only either the required types or the optional types should be set).
            For all types in this list the worker must have a port in its contract (an exception will be thrown
            during instantiation of the worker when a port with one of these types is missing).
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.XcoWorkerExtensionAttribute.Optional">
      <summary>
            The list of optional types (only either the required types or the optional types should be set).
            For these types the worker does not require to have a port, but the port will be used by the worker
            extension if it exists.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoConcurrentAttribute">
      <summary>
            Marks a Method of a Worker for processing objects of a certain type
            that are posted to the worker concurrently. (Method and fitting port
            of the worker are added to a CCR ConcurrentReceiverGroup.)
            MessageTransferMode is "Parallel" by default.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoConcurrentAttribute.#ctor">
      <summary>
            Creates a new XcoConcurrentAttribute.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoExclusiveAttribute">
      <summary>
            Marks a Method of a Worker for processing objects of a certain type
            that are posted to the worker exclusively. (Method and fitting port
            of the worker are added to a CCR ExclusiveReceiverGroup.)
            MessageTransferMode is "Sequential" by default.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoExclusiveAttribute.#ctor">
      <summary>
            Creates a new XcoExclusiveAttribute.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.XcoTeardownAttribute">
      <summary>
            Marks a Method of a Worker for processing objects of a certain type
            that are posted to the worker. As soon as an object is processed by
            this method, all CCR ReceiverTasks that are bound to the worker's
            PortSet are shut down. (Method and fitting port of the worker are 
            added to a CCR TeardownReceiverGroup.)
            MessageTransferMode is "Parallel" by default.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.XcoTeardownAttribute.#ctor">
      <summary>
            Creates a new XcoTeardownAttribute.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.CcrWiring.CcrRemote.RemotableTask">
      <summary>
            Base class for special Ccr tasks that can send data to a remote worker or port instance.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrWiring.CcrRemote.RemotableTask.CreateMessage(System.Object)">
      <summary>
            Method that must be implemented by base classes to create a message
            that should be sent from an item that has been posted to the port
            where this task is registered.
            </summary>
      <param name="value">The item that has been posted.</param>
      <returns>The message that should be sent.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrWiring.CcrRemote.RemotableTask.PartialClone(Microsoft.Ccr.Core.IPort,XcoAppSpaces.Core.MessageTransferMode)">
      <summary>
            Partially clones the task, while using the given port and transfer mode.
            </summary>
      <param name="assignedPort">
      </param>
      <param name="mode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:XcoAppSpaces.Core.CcrWiring.CcrRemote.NamedRemotableTask">
      <summary>
            Special Ccr task that can send data that has been posted to a port to named remote port instance
            (a worker).
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.CcrWiring.CcrRemote.AnonymousRemotableTask">
      <summary>
            Special Ccr task that can send data that has been posted to a port to an anonymous remote port instance
            (identified remotely by the given port guid).
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.CcrWiring.CcrWirer">
      <summary>
            Service for wiring workers, worker proxies and remote ports with the Ccr
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrWiring.CcrWirer.#ctor">
      <summary>
            Creates a new CcrWirer.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrWiring.CcrWirer.Initialize(XcoAppSpaces.Contracts.Service.IXcoServiceRegistry)">
      <summary>
            Gets the ccr dispatcher service from the space's service registry, which is needed
            to activate new ccr tasks for workers, worker proxies and remote ports.
            </summary>
      <param name="serviceRegistry">The registry where the service of the space instance are registered</param>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrWiring.CcrWirer.CreateWorker``2(Microsoft.Ccr.Core.DispatcherQueue)">
      <summary>
            Creates a new Worker and wires the worker ports with the message handlers contained in the worker class.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <typeparam name="TImplementation">The implementation type of the worker.</typeparam>
      <param name="dpq">The dispatcher queue that should be used for wiring the worker, or null if space's the default dispatcher queue should be used.</param>
      <returns>A WorkerInfo object containing the worker instance and additional information that has been gathered during the worker wiring.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrWiring.CcrWirer.WireWorker``1(``0,Microsoft.Ccr.Core.DispatcherQueue)">
      <summary>
            Wires a given worker's ports with its message handlers.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="worker">The worker instance.</param>
      <param name="dpq">The dispatcher queue that should be used for wiring the worker, or null if space's the default dispatcher queue should be used.</param>
      <returns>A WorkerInfo object containing the worker instance and additional information that has been gathered during the worker wiring.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrWiring.CcrWirer.CreateWorkerProxy``1(XcoAppSpaces.Contracts.Messaging.WorkerProxyInfo)">
      <summary>
            Creates a worker proxy for a remote worker from the given parameters.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker (must have an empty constructor so it can be instantiated as a proxy).</typeparam>
      <param name="proxyInfo">Information that is needed to create the worker proxy, like name and address of the worker.</param>
      <returns>The created worker proxy.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrWiring.CcrWirer.UnwireWorker(Microsoft.Ccr.Core.IPort)">
      <summary>
            Removes all registered receiver tasks from all ports of the worker.
            </summary>
      <param name="worker">The worker that should be unwired.</param>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrWiring.CcrWirer.GetPortSerializationInfo(Microsoft.Ccr.Core.IPort)">
      <summary>
            Gets a serialization info object that contains all information that is needed by the receiving space
            to deserialize the worker. The current serialization context is used to get the local adress, and
            to register the port at the local space and get a unique id for the port, if it is not already
            a remote port.
            </summary>
      <param name="port">The port to be serialized.</param>
      <returns>Object containing the info that must be sent to the remote space for deserialization of the port.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrWiring.CcrWirer.WireRemotePort(Microsoft.Ccr.Core.IPort,XcoAppSpaces.Contracts.CcrWiring.XcoPortSerializationInfo)">
      <summary>
            Wires a port using the given serialization info, so that it is ready for remote communication. The
            current serialization context is used to get the name of the communication service that should be
            used to send messages to the original port.
            </summary>
      <param name="port">The port to be wired.</param>
      <param name="portSerializationInfo">Info that is needed for wiring the remote port, like the port's id and remote address.</param>
    </member>
    <member name="T:XcoAppSpaces.Core.CcrWiring.PortHelpers">
      <summary>
            This class adds extension methods to the port that are needed at the appspace for serializing and deserializing ports.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.CcrWiring.PortHelpers.GetPortSerializationInfo(Microsoft.Ccr.Core.IPort)">
      <summary>
            Gets infos that are available for this port about remote communication.
            </summary>
      <param name="port">The port.</param>
      <returns>Remote communication information about this port.</returns>
    </member>
    <member name="T:XcoAppSpaces.Core.CcrWiring.WorkerFactory">
      <summary>
            The WorkerFactory class is responsible for creating workers and wiring their ports to the appropriate
            message handlers.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.Configuration.DefaultServices">
      <summary>
            Defines the service implementations config string interpreters that are used by default.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.Configuration.IXcoConfiguration">
      <summary>
            Interface definition for a configuration object that allows configuring an appspace instance.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.Configuration.IXcoConfiguration.InitServiceRegistry(XcoAppSpaces.Contracts.Service.IXcoServiceRegistry)">
      <summary>
            Initializes the service registry by adding instances for all services that are needed
            by an appspace instance.
            </summary>
      <param name="reg">The service registry that should be initalized.</param>
    </member>
    <member name="T:XcoAppSpaces.Core.Configuration.SpaceStringConfigurator">
      <summary>
            The SpaceStringConfigurator class allows to configure an appspace instance using a config string.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.Configuration.SpaceStringConfigurator.#ctor">
      <summary>
            Creates a new SpaceStringConfigurator and loads the list of predefined config string interpreter instances.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.Configuration.SpaceStringConfigurator.CreateConfig(System.String)">
      <summary>
            Creates an XcoAppSpaceConfiguration object from the given config string, which can then be used to create a
            new appspace instance with the given configuration. An XcoConfigurationException is thrown if the config 
            string is invalid.
            </summary>
      <param name="configString">The config string for which the configuration object should be created.</param>
      <returns>The configuration that was created from the config stirng.</returns>
    </member>
    <member name="T:XcoAppSpaces.Core.Configuration.XcoAppSpaceConfiguration">
      <summary>
            Fluent interface for creating an XcoAppSpace.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.Configuration.XcoAppSpaceConfiguration.#ctor">
      <summary>
            Creates a new XcoAppSpaceConfiguration.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Core.Configuration.XcoAppSpaceConfiguration.AddService(XcoAppSpaces.Contracts.Service.IXcoService,System.String,System.Boolean)">
      <summary>
            Defines a service that the XcoAppSpace should use (if not defined, the default for this type of service is used). An
            exception is thrown if the type of service is unknown.
            </summary>
      <param name="service">The service that the XcoAppSpace should use.</param>
      <param name="name">The name of the service.</param>
      <param name="isDefault">True if the service is the default.</param>
      <returns>An XcoFluentServiceConfiguration instance to configure the service.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.Configuration.XcoAppSpaceConfiguration.AddService(XcoAppSpaces.Contracts.Service.IXcoService)">
      <summary>
            Adds a service to the XcoAppSpaceConfiguration instance.
            </summary>
      <param name="service">The service instance that should be added.</param>
      <returns>An XcoServiceConfiguration instance that allows further configuration of the service.</returns>
    </member>
    <member name="M:XcoAppSpaces.Core.Configuration.XcoAppSpaceConfiguration.InitServiceRegistry(XcoAppSpaces.Contracts.Service.IXcoServiceRegistry)">
      <summary>
            Initializes the service registry by adding instances for all services that are part of this
            XcoAppSpaceConfiguration instance. For any service that has not been configured explicitly,
            an instance of the default service for this service type is added.
            </summary>
      <param name="reg">The service registry that should be initalized.</param>
    </member>
    <member name="P:XcoAppSpaces.Core.Configuration.XcoAppSpaceConfiguration.CcrDispatcher">
      <summary>
            The configured ccr dispatcher instance (or null, if no special instance has been configured).
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Core.Configuration.XcoServiceConfiguration">
      <summary>
            Class for XcoService configurations.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.Configuration.XcoServiceConfiguration.ConfiguredService">
      <summary>
            The service instance.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.Configuration.XcoServiceConfiguration.Name">
      <summary>
            The name of the service.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Core.Configuration.XcoServiceConfiguration.IsDefault">
      <summary>
            True if the service is the default for this type of service.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Communication.IConnector">
      <summary>
            Service for connecting to remote workers and handling the space's transport services, as well as communication errors.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Communication.IConnector.IsLocal(System.String)">
      <summary>
            Checks a certain address if it is the address of the local space. This is the case if the
            address is either NULL of if it is equal (ignoring case) to the local address.
            </summary>
      <param name="address">The address to be checked.</param>
      <returns>True if the address refers to the local space.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Communication.IConnector.ConnectWorker``1(System.String,System.String,System.Net.ICredentials)">
      <summary>
            Establishes a connection to a worker that is running at a remote space. Returns information that
            can be used to generate proxy of the worker that allows posting messages that are automatically 
            transported to the worker.
            If the worker does't exist or the connection to the space cannot be established, an
            XcoCommunicationException is thrown.
            </summary>
      <typeparam name="TContract">The contract type of the worker to connect to.</typeparam>
      <param name="workerAddress">The address of the worker in den form "address/workername"</param>
      <param name="commServiceName">The name of the communication service that should be used to communicate with the worker (or null if the default communication service should be used).</param>
      <param name="credentials">The credentials that should be used to connect to the worker.</param>
      <returns>Information about the worker that can be used to generate a proxy to communicate with this worker.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Communication.IConnector.ConnectWorker``1(System.String,System.String,System.String,System.Net.ICredentials)">
      <summary>
            Establishes a connection to a worker that is running at a remote space. Returns information that
            can be used to generate proxy of the worker that allows posting messages that are automatically 
            transported to the worker.
            If the worker does't exist or the connection to the space cannot be established, an
            XcoCommunicationException is thrown.
            </summary>
      <typeparam name="TContract">The contract type of the worker to connect to.</typeparam>
      <param name="name">The name of the worker.</param>
      <param name="address">The address of the space where the worker is running (in form hostname:port).</param>
      <param name="commServiceName">The name of the communication service that should be used to communicate with the worker (or null if the default communication service should be used).</param>
      <param name="credentials">The credentials that should be used to connect to the worker.</param>
      <param name="commServiceInfo">Information about the communication service that the proxy will use to communicate with the worker.</param>
      <returns>Information about the worker that can be used to generate a proxy to communicate with this worker.</returns>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Communication.IConnector.LocalAddress">
      <summary>
            The local address of the space (in form hostname:port).
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Communication.IConnector.CommServices">
      <summary>
            The list of registered communication services.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Communication.IConnector.Errors">
      <summary>
            Port where communication errors are posted that are not caught by causalities.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Communication.XcoCommunicationError">
      <summary>
            Description for an error that occurred during communication (serialization, 
            send/receive, deserialization).
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Communication.XcoCommunicationError.#ctor(System.Exception,System.String,System.String)">
      <summary>
            Creates a new XcoCommunicationError.
            </summary>
      <param name="error">The exception that has been thrown.</param>
      <param name="info">Additional info to the error.</param>
      <param name="sourceAddress">The address of the space where the error occurred.</param>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Communication.XcoCommunicationError.Error">
      <summary>
            The exception that has been thrown.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Communication.XcoCommunicationError.Info">
      <summary>
            Additional info to the error.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Communication.XcoCommunicationError.SourceAddress">
      <summary>
            The address of the space where the error occurred.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Communication.XcoTransportServiceInfo">
      <summary>
            Information about a communication service that is running in a space instance.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Communication.XcoTransportServiceInfo.#ctor(System.String,System.Boolean,XcoAppSpaces.Contracts.Transport.IXcoTransportService)">
      <summary>
            Creates a new XcoCommunicationServiceInfo.
            </summary>
      <param name="name">The name of the communication service.</param>
      <param name="isDefault">True if the communication service is used as default for this space instance.</param>
      <param name="service">The service instance.</param>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Communication.XcoTransportServiceInfo.Name">
      <summary>
            The name of the communication service.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Communication.XcoTransportServiceInfo.IsDefault">
      <summary>
            True if the communication service is used as default for this space instance.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Communication.XcoTransportServiceInfo.Service">
      <summary>
            The service instance.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Service.IXcoServiceFluentConfiguration`2">
      <summary>
            Interface that is implemented by classes allowing fluent service configuration. Allows
            service implementations to extend the configuration of their own service with additional
            extension methods.
            </summary>
      <typeparam name="TService">The type of service that is getting configured.</typeparam>
      <typeparam name="TConfig">The type of configuration object that should be returned for further configuration with the fluent interface.</typeparam>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.IXcoServiceFluentConfiguration`2.Service">
      <summary>
            The service that is getting configured.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.IXcoServiceFluentConfiguration`2.Config">
      <summary>
            The configuration object that should be returned for further configuration with the fluent interface.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Service.IXcoConfigStringInterpreter">
      <summary>
            Interface for classes that are able to interpret a space configuration.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoConfigStringInterpreter.Interpret(System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Interprets the given configuration string and, according to the configuration string elements,
            alters the space configuration (e.g. by adding new services or altering the configuration of already
            added services).
            </summary>
      <param name="configStringElements">Dictionary of configuration elements (key-value pairs)</param>
      <returns>Configuration for the service</returns>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Service.IXcoService">
      <summary>
            Interface for services that can be used by an XcoAppSpace.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoService.Initialize(XcoAppSpaces.Contracts.Service.IXcoServiceRegistry)">
      <summary>
            Initializes the services. Hands over the service registry, so the service can get access 
            to other services of the appspace instance, if it needs to.
            </summary>
      <param name="serviceRegistry">The service registry of the current appspace instance.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Service.IXcoServiceRegistry">
      <summary>
            The service registry contains all services of a space instance and can initialize, start and stop
            its services.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoServiceRegistry.Resolve``1">
      <summary>
            Gets the service with the given type from the registry.
            </summary>
      <typeparam name="T">The type of the service.</typeparam>
      <returns>The resolved service instance, or null if no instance could be found.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoServiceRegistry.Resolve``1(System.String)">
      <summary>
            Gets the service with the given type and name from the registry.
            </summary>
      <typeparam name="T">The type of the service.</typeparam>
      <param name="name">The name of the service.</param>
      <returns>The resolved service instance, or null if no instance could be found.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoServiceRegistry.ResolveAll``1">
      <summary>
            Gets all services with the given type from the registry.
            </summary>
      <typeparam name="T">The type of the service.</typeparam>
      <returns>Dictionary with all services of the given type, with the name as key.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoServiceRegistry.Register``1(``0)">
      <summary>
            Registers a new service at the registry.
            </summary>
      <typeparam name="T">The type of the service.</typeparam>
      <param name="service">The service instance.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoServiceRegistry.Register``1(``0,System.String)">
      <summary>
            Registers a new service at the registry.
            </summary>
      <typeparam name="T">The type of the service.</typeparam>
      <param name="service">The service instance.</param>
      <param name="name">The name of the service.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoServiceRegistry.SetDefaultName``1(System.String)">
      <summary>
            Sets a default name for a given type of service. The service with this
            name is the one that should be used by default, if more than one service
            with the same type is available.
            </summary>
      <typeparam name="T">The type of service for which the name should be set.</typeparam>
      <param name="name">The name to be set.</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoServiceRegistry.GetDefaultName``1">
      <summary>
            Gets the default name for a certain type of service.
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>The default name for the given type of service, or null if no default name is defined.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoServiceRegistry.InitializeServices">
      <summary>
            Initializes all services in the registry, by calling their Initialize methods.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoServiceRegistry.StartServices">
      <summary>
            Starts all stateful services in the registry by calling their Start methods (in the order 
            according to the start priority of the services).
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoServiceRegistry.StopServices">
      <summary>
            Stops all stateful services in the registry by calling their Stop methods.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Service.IXcoStatefulService">
      <summary>
            Interface for stateful services that can be used by an XcoAppSpace.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoStatefulService.Start">
      <summary>
            Starts the service.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.IXcoStatefulService.Stop">
      <summary>
            Stops the service.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.IXcoStatefulService.StartPriority">
      <summary>
            StartPriority for the service (services with a low priority are started first, e.g. priority 1 comes before priority 5).
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Service.XcoConfigStringInterpreterBase">
      <summary>
            Basic interpreter for service config strings
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Service.XcoConfigStringInterpreterBase.Interpret(System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Interprets the given configuration string and, according to the configuration string elements
            </summary>
      <param name="configStringElements">Dictionary of configuration elements (key-value pairs)</param>
      <returns>Configuration for the service</returns>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.XcoConfigStringInterpreterBase.ServiceConfig">
      <summary>
            Configuration of the service
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.XcoConfigStringInterpreterBase.InterpretDefinition">
      <summary>
            The interpret definition for all config strings 
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.XcoConfigStringInterpreterBase.GetService">
      <summary>
            Get serviceinstance
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Service.XcoServiceAttribute">
      <summary>
            Base class for attributes that can be added to Workers (and/or their Methods/Fields)
            and should be recognized when instantiating a worker because a service
            needs them (e.g. security service).
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Service.XcoServiceAttributeInfo">
      <summary>
            Information about a service attribute that belongs to a certain worker or one of its message processor methods.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.XcoServiceAttributeInfo.Attr">
      <summary>
            The attribute instance.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.XcoServiceAttributeInfo.WorkerMessageType">
      <summary>
            The message type the given attribute was assigned to, or null if the attribute belongs to the worker directly.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Service.XcoServiceConfiguration">
      <summary>
            Configuration for an IXcoService instance.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.XcoServiceConfiguration.Name">
      <summary>
            The name of the service.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.XcoServiceConfiguration.IsDefault">
      <summary>
            True if the service is a default service. (E.g. default communication service which
            is used as default by the space if no other communication service is chosen)
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Service.XcoServiceConfiguration.Service">
      <summary>
            The service instance.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Transport.IXcoMessageReceiverService">
      <summary>
            Service that should recieve all messages from the appspace's transport services.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Transport.IXcoMessageReceiverService.MessageReceived(XcoAppSpaces.Contracts.Transport.XcoMessage,XcoAppSpaces.Contracts.Transport.IXcoTransportService)">
      <summary>
            Method to be called by a transport service when a message is received.
            </summary>
      <param name="msg">The message that has been received.</param>
      <param name="commService">The transport service that received the message.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Transport.IXcoTransportService">
      <summary>
            Interface definition for Services that can be used for communication between application spaces.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Transport.IXcoTransportService.Send(XcoAppSpaces.Contracts.Transport.XcoMessage)">
      <summary>
            Sends a message to a remote space.
            </summary>
      <param name="msg">The messages that should be sent.</param>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Transport.IXcoTransportService.LocalAddress">
      <summary>
            The Address of the server.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Transport.XcoMessage">
      <summary>
            Interface definition for a message to be sent by remote communication.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Transport.XcoMessage.RemoteAddress">
      <summary>
            The address of the remote space where the message should be sent to,
            or the address where the message is received from.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Transport.XcoMessage.CausalityContext">
      <summary>
            The causality context of the message, defining the causalities
            that should be installed for processing the message.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Transport.XcoMessage.Content">
      <summary>
            The content of the message.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Transport.XcoMessage.ContentInfo">
      <summary>
            Info about the message content that can be used for an error message if deserialization fails.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Worker.WorkerEventHandler">
      <summary>
            Delegate used for events when the worker is added or removed.
            </summary>
      <param name="sender">The IXcoWorkerRegistry instance that triggered the event.</param>
      <param name="workerInfo">Information about the worker that has been added or removed.</param>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Worker.IXcoWorkerRegistry">
      <summary>
            Interface for class that provides access to the registry of local workers. Allows
            to resolve workers, check if a worker exists and register new ones.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Worker.IXcoWorkerRegistry.Register``1(``0,System.String)">
      <summary>
            Registers a new worker.
            </summary>
      <typeparam name="TContract">The contract type of the worker.</typeparam>
      <param name="instance">The worker instance to be registered.</param>
      <param name="name">The name of the worker (null if the worker doesn't have a name).</param>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Worker.IXcoWorkerRegistry.Exists(System.Type,System.String,System.Boolean,System.Boolean)">
      <summary>
            Checks if a certain worker exists.
            </summary>
      <param name="contractType">The contract type of the worker.</param>
      <param name="name">The name of the worker.</param>
      <param name="onlyPublished">Only search for published workers.</param>
      <param name="connectionRequest">True if the method is called because of a connection request.</param>
      <returns>True if a worker with the given type and name exists.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Worker.IXcoWorkerRegistry.Resolve(System.Type,System.String,System.Boolean)">
      <summary>
            Resolves a worker from the registry and returns an info object that contains
            the worker object and further information about the worker.
            </summary>
      <param name="contractType">The contract type of the worker.</param>
      <param name="name">The name of the worker.</param>
      <param name="onlyPublished">Only search for published workers.</param>
      <returns>A worker info object for the worker, if one with the given type and name exists, otherwise null.</returns>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Worker.IXcoWorkerRegistry.Resolve``1(System.String)">
      <summary>
            Resolves a worker from the registry.
            </summary>
      <typeparam name="TMessageContract">The contract type of the worker.</typeparam>
      <param name="name">The name of the worker.</param>
      <returns>The worker instance, if one with the given type and name exists, otherwise null.</returns>
    </member>
    <member name="E:XcoAppSpaces.Contracts.Worker.IXcoWorkerRegistry.WorkerAdded">
      <summary>
            Event that is triggered when a new worker is added to the worker registry.
            </summary>
    </member>
    <member name="E:XcoAppSpaces.Contracts.Worker.IXcoWorkerRegistry.WorkerRemoved">
      <summary>
            Event that is triggered when an existing worker is removed form the worker registry.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Worker.PublishMode">
      <summary>
             Defines if a worker should be published so other appspace
             instances can connnect to it
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Contracts.Worker.PublishMode.Unpublished">
      <summary>
             Worker will no be published, invisible for other spaces.
            </summary>
    </member>
    <member name="F:XcoAppSpaces.Contracts.Worker.PublishMode.Published">
      <summary>
             Worker will be published, so other space instance can connect to it.
            </summary>
    </member>
    <member name="T:XcoAppSpaces.Contracts.Worker.XcoWorkerInfo">
      <summary>
            Presents information about a worker in the space.
            </summary>
    </member>
    <member name="M:XcoAppSpaces.Contracts.Worker.XcoWorkerInfo.#ctor(Microsoft.Ccr.Core.IPort,System.Type,System.String,XcoAppSpaces.Contracts.Worker.PublishMode,System.Collections.Generic.List{XcoAppSpaces.Contracts.Service.XcoServiceAttributeInfo},System.Collections.Generic.Dictionary{System.Type,XcoAppSpaces.Core.XcoProcessorAttribute},System.Boolean,System.String,System.String)">
      <summary>
            Creates a new XcoWorkerInfo.
            </summary>
      <param name="instance">The worker instance.</param>
      <param name="contractType">The contract type of the worker.</param>
      <param name="name">The name of the worker.</param>
      <param name="publishMode">The publish mode of the worker, specifies if the worker is visible to remote spaces.</param>
      <param name="serviceAttributes">List of attributes of the worker, that could be interesting to services of the space.</param>
      <param name="processorAttributes">List of attributes of the processors of this worker.</param>
      <param name="isRemote">True if the worker is not local, but actually hosted by another appspace instance.</param>
      <param name="remoteAddress">The remote address of the worker, or null if the worker is local.</param>
      <param name="transportServiceName">Information about the transport service that the worker uses, or null if the worker is local.</param>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Worker.XcoWorkerInfo.Name">
      <summary>
            The name of the worker.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Worker.XcoWorkerInfo.IsPublished">
      <summary>
            True if the worker is published (reachable by other appspace instances).
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Worker.XcoWorkerInfo.IsRemote">
      <summary>
            True if the worker is not local, but actually hosted by another appspace instance.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Worker.XcoWorkerInfo.RemoteAddress">
      <summary>
            The remote address of the worker, or null if the worker is local.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Worker.XcoWorkerInfo.TransportServiceName">
      <summary>
            Information about the transport service that the worker uses, or null
            if the worker is local.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Worker.XcoWorkerInfo.Worker">
      <summary>
            The worker instance.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Worker.XcoWorkerInfo.ContractType">
      <summary>
            The contract type of the worker.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Worker.XcoWorkerInfo.ServiceAttributes">
      <summary>
            List of attributes of the worker, that could be interesting to services of the space.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Worker.XcoWorkerInfo.ProcessorAttributes">
      <summary>
            List of attributes of the processors of this worker.
            </summary>
    </member>
    <member name="P:XcoAppSpaces.Contracts.Worker.XcoWorkerInfo.NumberOfConnections">
      <summary>
            The number of connections to the worker (= how many times the "ConnectWorker" method
            was called to connect to this worker).
            </summary>
    </member>
  </members>
</doc>